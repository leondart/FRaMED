/**
 * Transforms a relation with type INHERITANCE.
 */

operation getPlace(card : String,holder:target!RoleType) : target!Place {
	var place = new target!Place;
	place.lower = 0;
	place.upper = -1;
	if(card.isDefined()) {
		var cards = parseCardinality(card);
		if(cards.size()==1)
			place.lower = cards[0];
		if(cards.size()>1){
			place.lower = cards[0];
			place.upper = cards[1];
		}				
	}
	if(holder.isDefined()){
		place.holder = holder;
	}
	return place;
}

operation getPlace(card : String,holder:target!RigidType) : target!Place {
	fail("Place can only reference role types as placeholders!");
}


rule Relationship
	transform s : source!Relation
	to t : target!Relationship {

	guard : s.getType.getValue == 7 // enum value RELATIONSHIP
	
	t.name = s.name;
	
	/*Place should always be defined*/
	var card = "0..*";
	if(s.sourceLabel.isDefined()){
		card=s.sourceLabel.name;
	}
	var place = getPlace(card,s.getSource.equivalent());
	if(not(place==null)) {
		t.setFirst(place);
	}
	
	//Place should always be defined
	card="0..*";
	if(s.targetLabel.isDefined()){
		card=s.targetLabel.name;
	}
	place = getPlace(card,s.getTarget.equivalent());
	if(not(place==null)) {
		t.setSecond(place);
	}	
	
	//t.first - place from label
	//t.second - place from label
	
	s.getSource.equivalent().getOutgoing.add(t);
	s.getTarget.equivalent().getIncoming.add(t);

	for (r : source!Relation in s.referencedRelation) {
		var referenced = r.equivalent();
		referenced.setRelation(t);
	}
}

rule TotalRelation
	transform s : source!Relation
	to t : target!Total {
	
	guard : s.getType.getValue == 8 
	
}

rule CyclicRelation
	transform s : source!Relation
	to t : target!Cyclic {
	
	guard : s.getType.getValue == 9 
	
}  

rule IrreflexiveRelation
	transform s : source!Relation
	to t : target!Irreflexive {
	
	guard : s.getType.getValue == 10 
	
} 

rule AcyclicRelation
	transform s : source!Relation
	to t : target!Acyclic {
	
	guard : s.getType.getValue == 17 
	
} 

rule ReflexiveRelation
	transform s : source!Relation
	to t : target!Reflexive {
	
	guard : s.getType.getValue == 18 
	
} 