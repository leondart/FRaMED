/**
 * Transforms a relation with type INHERITANCE.
 */

operation getPlace(card : String,holder:target!RoleType) : target!Place {
	var place = new target!Place;
	place.lower = 0;
	place.upper = -1;
	if(card.isDefined()) {
		var cards = parseCardinality(card);
		if(cards.size()==1)
			place.lower = cards[0];
		if(cards.size()>1){
			place.lower = cards[0];
			place.upper = cards[1];
		}				
	}
	if(holder.isDefined()){
		place.holder = holder;
	}
	return place;
}

operation getPlace(card : String,holder:target!RigidType) : target!Place {
	fail("Place can only reference role types as placeholders!");
}

@lazy 
rule Relationship
	transform s : source!Relation
	to t : target!Relationship {

	guard : s.getType.getValue == 7 and s.~features.get("Relationships") // enum value RELATIONSHIP
	
	t.name = s.name;
	
	if(s.~features.get("Relationship_Cardinality")) { // feature Relationship_Cardinality implies feature Relationship_Constraints (not to check)	
		//Place should always be defined
		var card = "0..*";
		if(s.sourceLabel.isDefined()){
			card=s.sourceLabel.name;
		}
		var place = getPlace(card,s.getSource.equivalent());
		if(not(place==null)) {
			t.setFirst(place);
		}
		
		//Place should always be defined
		card="0..*";
		if(s.targetLabel.isDefined()){
			card=s.targetLabel.name;
		}
		place = getPlace(card,s.getTarget.equivalent());
		if(not(place==null)) {
			t.setSecond(place);
		}
	} else {
		var place = getPlace("0...*",s.getSource.equivalent());
		t.setFirst(place);
		place = getPlace("0...*",s.getTarget.equivalent());
		t.setSecond(place);
	}		
		
		//t.first - place from label
		//t.second - place from label
		
		s.getSource.equivalent().getOutgoing.add(t);
		s.getTarget.equivalent().getIncoming.add(t);
	
		for (r : source!Relation in s.referencedRelation) {
			var referenced = r.equivalent();
			if(not(referenced == null))referenced.setRelation(t);
		}
}

@lazy 
rule TotalRelation
	transform s : source!Relation
	to t : target!Total {
	
	guard : s.getType.getValue == 8 and s.~features.get("Intra_Relationship_Constraints")
	
}

@lazy 
rule CyclicRelation
	transform s : source!Relation
	to t : target!Cyclic {
	
	guard : s.getType.getValue == 9 and s.~features.get("Intra_Relationship_Constraints") 
	
}  

@lazy 
rule IrreflexiveRelation
	transform s : source!Relation
	to t : target!Irreflexive {
	
	guard : s.getType.getValue == 10 and s.~features.get("Intra_Relationship_Constraints") 
	
} 

@lazy 
rule AcyclicRelation
	transform s : source!Relation
	to t : target!Acyclic {
	
	guard : s.getType.getValue == 17 and s.~features.get("Intra_Relationship_Constraints") 
	
} 

@lazy 
rule ReflexiveRelation
	transform s : source!Relation 
	to t : target!Reflexive {
	
	guard : s.getType.getValue == 18 and s.~features.get("Intra_Relationship_Constraints") 
	
} 