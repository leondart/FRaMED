operation Any createPlace(referenced : source!ModelElement, label : source!NamedElement) : target!Place {
	var place = new target!Place;
	
	place.holder = referenced.equivalent();
	
	if (label == null) {
		return place;
	}
	
	var desc = label.description;
	if (not (desc == null)) {
		var cards = desc.name;
		if (cards.matches("[0-9]*..[0-9]*")) {
			var card = cards.split("\\.\\.");
			place.lower = new Native("java.lang.Integer")(card[0]);
			place.upper = new Native("java.lang.Integer")(card[1]);
		} else if (cards.matches("[0-9]*..\\*")) {
			var card = cards.split("\\.\\.");
			place.lower = new Native("java.lang.Integer")(card[0]);		
		} else if (cards.matches("[0-9]*")) {
			place.lower = new Native("java.lang.Integer")(cards);
			place.upper = new Native("java.lang.Integer")(cards);
		}
	}
	
	return place;
}

/**
 * Transforms a relation with type INHERITANCE.
 */
rule Relationship
	transform s : source!Relation
	to t : target!Relationship {

	guard : s.getType.getValue == 7 // enum value RELATIONSHIP
	
	t.name = s.name;
	
	t.first = createPlace(s.getSource, s.sourceLabel);
	t.second = createPlace(s.getTarget, s.targetLabel);
	
	s.getSource.equivalent().getOutgoing.add(t);
	s.getTarget.equivalent().getIncoming.add(t);

	for (r : source!Relation in s.referencedRelation) {
		var referenced = r.equivalent();
		referenced.setRelation(t);
	}	
}

rule TotalRelation
	transform s : source!Relation
	to t : target!Total {
	
	guard : s.getType.getValue == 8 
	
}

rule CyclicRelation
	transform s : source!Relation
	to t : target!Cyclic {
	
	guard : s.getType.getValue == 9 
	
}  

rule IrreflexiveRelation
	transform s : source!Relation
	to t : target!Irreflexive {
	
	guard : s.getType.getValue == 10 
	
} 
