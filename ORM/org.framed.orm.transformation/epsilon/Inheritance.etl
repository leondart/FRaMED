/**
 * Sets the source and target attributes of the inheritance relation and adds the relation to 
 * the incoming and outgoing relations of its source and target. 
 *
 * It is assumed that source and target reference are valid, i.e., are of the same type and correspond
 * to the inheritance. For instance, a NaturalInheritance has source and target elements of type NaturalType.
 */
operation Any transformInheritance(s : source!Relation, t : target!Inheritance) {
	var relationSource = s.getSource.equivalent();
	var relationTarget = s.getTarget.equivalent();
	
	t.sub = relationSource;
	t.super = relationTarget;
	
	relationSource.getOutgoing.add(t);
	relationTarget.getIncoming.add(t);	
}

/**
 * Transforms a relation with type INHERITANCE between two elements of type COMPARTMENT_TYPE.
 */
rule CompartmentInheritance
	transform s : source!Relation
	to t : target!CompartmentInheritance {

	guard : s.getType.getValue == 6 // enum value INHERITANCE
		and s.getSource.getType.getValue == 0 // COMPARTMENT_TYPE
		and s.getTarget.getType.getValue == 0 // COMPARTMENT_TYPE
		
	transformInheritance(s, t);
}

/**
 * Transforms a relation with type INHERITANCE between two elements of type NATURAL_TYPE.
 */
rule NaturalInheritance
	transform s : source!Relation
	to t : target!NaturalInheritance {

	guard : s.getType.getValue == 6 // enum value INHERITANCE
		and s.getSource.getType.getValue == 1 // NATURAL_TYPE
		and s.getTarget.getType.getValue == 1 // NATURAL_TYPE
	
	transformInheritance(s, t);
}

/**
 * Transforms a relation with type INHERITANCE between two elements of type ROLE_TYPE.
 */
rule RoleInheritance
	transform s : source!Relation
	to t : target!RoleInheritance {

	guard : s.getType.getValue == 6 // enum value INHERITANCE
		and s.getSource.getType.getValue == 2 // ROLE_TYPE
		and s.getTarget.getType.getValue == 2 // ROLE_TYPE
	
	transformInheritance(s, t);
}

/**
 * Transforms a relation with type INHERITANCE between two elements of type DATA_TYPE.
 */
rule DataInheritance
	transform s : source!Relation
	to t : target!DataInheritance {

	guard : s.getType.getValue == 6 // enum value INHERITANCE
		and s.getSource.getType.getValue == 3 // DATA_TYPE
		and s.getTarget.getType.getValue == 3 // DATA_TYPE
	
	transformInheritance(s, t);
}