import "CompartmentType.etl";
import "DataType.etl";
import "NaturalType.etl";
import "RoleType.etl";

import "RoleGroup.etl";
import "Group.etl";

import "RoleConstraints.etl";
import "RelationshipImplication.etl";
import "RelationshipExclusion.etl";

import "Inheritance.etl";
import "Relationship.etl";
import "Fulfillment.etl";

operation Any println() : Any { 
	("Printing : " + self)->println();
}

operation Any setFeatureMap() : Map {
	self.put("Role_Types",false); self.put("Role_Structure",false); 
	self.put("Role_Properties",false); self.put("Role_Behavior",false); 
	self.put("Role_Inheritance",false); self.put("Playable",false);
	self.put("Players",false); self.put("Naturals",false); 
	self.put("Compartments",false); self.put("Dates",false); 
	self.put("Dependent",false); self.put("On_Compartments",false);
	self.put("On_Relationships",false); self.put("Role_Constraints",false); 
	self.put("Role_Implication",false); self.put("Role_Prohibition",false); 
	self.put("Role_Equivalence",false); self.put("Group_Constraints",false);
	self.put("Occurrence_Constraints",false); self.put("Relationships",false); 
	self.put("Relationship_Constraints",false); self.put("Relationship_Cardinality",false);
	self.put("Intra_Relationship_Constraints",false); self.put("Parthood_Constraints",false);
	self.put("Inter_Relationship_Constraints",false); self.put("Compartment_Types",false); 
	self.put("Compartment_Structure",false); self.put("Compartment_Properties",false);
	self.put("Compartment_Behavior",false); self.put("Compartment_Inheritance",false);
	self.put("Participants",false); self.put("Playable_by_Defining_Compartment",false);
	self.put("Data_Types",false); self.put("Data_Type_Inheritance",false);
}

rule ORM2CROM
	transform mym : source!Model
	to crom : target!Model {
	guard : mym.parent == null
	
	var featureMap : Map;
	featureMap.setFeatureMap();
	for(f in mym.framedConfiguration.features) {
		featureMap.put(f.getName().asString(), true);
	}
	for(e in mym.elements) {
		e.~features=featureMap;
	}
	
	for(shape : source!Shape in mym.elements) {
		var x = shape.equivalent();
		if(not ((x == null) or x.instanceOf(target!AbstractRole))) {
			crom.elements.add(x);
		}
	}
	
	for (relation : source!Relation in mym.elements) {
		var r = relation.equivalent();
		if (not (r == null)) {
			if(not(r.isKindOf(Sequence))) {
				crom.relations.add(r);
			} else {
				for(ob in r) {
					crom.relations.add(ob);
				}
			}
		}
	}
	
}

