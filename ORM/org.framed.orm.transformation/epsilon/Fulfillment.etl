operation toTransform(t : source!Relation) : Boolean {
	//check source of fulfillment and fitting feature
	switch(t.source.getType.getValue) {
		case 0: if(t.~features.get("Compartments")) {
					if(not(t.source==t.target)) return true;
					if((t.source==t.target and t.~features.get("Playable_by_Defining_Compartment"))) return true;
				}
		case 1: return true;
		case 3: if(t.~features.get("Dates")) return true;
	}
	return false;
}

@lazy 
rule Fulfillment
	transform t : source!Relation
	to n : Sequence(target!Fulfillment) {
	
	guard : t.getType.getValue == 14 // enum value Fulfillment
	
	if(toTransform(t)){
		for(role : source!Shape in t.referencedRoles) {
			var fulfillment = new target!Fulfillment;
			fulfillment.filler ::= t.source;
			fulfillment.filled ::= role;
			n.add(fulfillment);
		}	
	}
}