import "Type.etl";
import "CardinalityParser.eol";

pre CompartmentType {
	var compartmentTypes : OrderedSet(source!Shape);
}

/**
 * Transforms a shape with type COMPARTMENT_TYPE.
 */
@lazy 
rule CompartmentType
	transform t : source!Shape
	to n : target!CompartmentType {

	guard : t.getType.getValue == 0 // enum value COMPARTMENT_TYPE

	compartmentTypes.add(t);

	var children = t.getModel();
	if (not (children == null)) {
		for(e in children.elements) e.~features=t.~features;
	
		// iterate over all children of the compartment type	
		for (elem : source!ModelElement in children.elements) {
			
			var e = elem.equivalent();
			
			if (e == null) { continue; }
			if (e.instanceOf(target!AbstractRole)) { 			// ROLE
				// create a new part with the role
				var part = new target!Part;
				part.role = e;
				part.whole = n;
				// parse the lower and upper bound from the role
				var desc = elem.description;
				if (not (desc == null) and t.~features.get("Occurrence_Constraints")) {
					var card = desc.name;
					var cards = parseCardinality(card);
					
					if(cards.size()>0) {
						part.lower = cards[0];
						if(cards.size()>1) {
							part.upper = cards[1];
						}				
					}	
				}				
				// add the new part to the compartment
				n.getParts().add(part);
				
			} else if (e.instanceOf(target!RelationshipImplication) or e.instanceOf(target!RelationshipExclusion)) { // INTER_RELATIONSHIP_CONSTRAINT
				for (rst : source!Relation in children.elements){
					if (rst.getType.getValue == 7){ // RELATIONSHIP
						//Discover source and target Relationships of the inter relationship constraint
						if (rst.connectionAnchor == elem.source)
							e.first = rst.equivalent();
						if (rst.connectionAnchor == elem.target)
							e.second = rst.equivalent();
					}						
				}
				n.getConstraints().add(e);	//add CONSTRAINTS as well			
			} else if ( e.instanceOf(target!Constraint)) {		// CONSTRAINT
				n.getConstraints().add(e);
			} else if ( e.instanceOf(target!Relationship)) {	// RELATIONSHIP
				n.getRelationships().add(e);
			} else if ( e.instanceOf(target!RoleInheritance)) {
				t.~parent.relations.add(e);
			}			
		}
	}
	
	n.name = t.name;
}

/**
 * Add operations and attributes in the post processing step.
 *
 * This separation is necessary as the type references in attributes and operations may form cycles between
 * types/shapes. The post block ensures that these cycles can be resolved.
 */
post CompartmentType {
	for (t : source!Shape in compartmentTypes) {
		var n = t.equivalent();

		if (not n.isDefined() or not t.isDefined()) {
			continue;
		}

		if(t.~features.get("Compartment_Behavior")) { //feature Compartment_Behavior implies feature Compartment_Properties (not to check)
			t.addAttributes(n);
		    t.addOperations(n);
		}	
	}
}
