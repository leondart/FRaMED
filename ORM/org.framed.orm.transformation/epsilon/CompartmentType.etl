import "Type.etl";

pre CompartmentType {
	var compartmentTypes : OrderedSet(source!Shape);
}

/**
 * Transforms a shape with type COMPARTMENT_TYPE.
 */
rule CompartmentType
	transform t : source!Shape
	to n : target!CompartmentType {

	guard : t.getType.getValue == 0 // enum value COMPARTMENT_TYPE

	n.name = t.name;

	compartmentTypes.add(t);
	
	// iterate over all children of the compartment type
	for (elem : source!ModelElement in t.getModel().elements) {	
		var e = elem.equivalent();
		
		if ( e.instanceOf(target!AbstractRole)) { 		// ROLE
			// create a new part with the role
			var part = new target!Part;
			part.role = e;
			part.whole = n;
			
			// parse the lower and upper bound from the role
			var card = elem.description.name;
			if (card.matches("[0-9]*..[0-9]*")) {
				var cards = card.split("\\.\\.");
				part.lower = new Native("java.lang.Integer")(cards[0]);
				part.upper = new Native("java.lang.Integer")(cards[1]);
			} else if (card.matches("[0-9]*..\\*")) {
				var cards = card.split("\\.\\.");
				part.lower = new Native("java.lang.Integer")(cards[0]);
			} else if (card.matches("[0-9]*")) {
				part.lower = new Native("java.lang.Integer")(card);
				part.upper = new Native("java.lang.Integer")(card);
			}
			
			// add the new part to the compartment
			n.getParts().add(part);
		} else if ( e.instanceOf(target!Constraint)) {	// CONSTRAINT
		
		} else {										// RELATIONSHIP
		
		}		
	}
}

/**
 * Add operations and attributes in the post processing step.
 *
 * This separation is necessary as the type references in attributes and operations may form cycles between
 * types/shapes. The post block ensures that these cycles can be resolved.
 */
post CompartmentType {
	for (t : source!Shape in compartmentTypes) {
		var n = t.equivalent();

		if (not n.isDefined() or not t.isDefined()) {
			continue;
		}

		t.addAttributes(n);
		t.addOperations(n);
	}
}
