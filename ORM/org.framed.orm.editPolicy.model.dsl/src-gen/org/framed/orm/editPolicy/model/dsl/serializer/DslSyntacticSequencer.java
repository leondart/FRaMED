/*
 * generated by Xtext 2.10.0
 */
package org.framed.orm.editPolicy.model.dsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.framed.orm.editPolicy.model.dsl.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_PrimaryMapping_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_PrimaryMapping_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_1_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DslGrammarAccess) access;
		match_PrimaryMapping_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryMappingAccess().getLeftParenthesisKeyword_1_0());
		match_PrimaryMapping_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryMappingAccess().getLeftParenthesisKeyword_1_0());
		match_Primary_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
		match_Primary_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_PrimaryMapping_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_PrimaryMapping_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryMapping_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_PrimaryMapping_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' rule=PrimaryMapping
	 *     (rule start) (ambiguity) 'true' (rule start)
	 *     (rule start) (ambiguity) name=EString
	 *     (rule start) (ambiguity) {AndMappingRule.rules+=}
	 *     (rule start) (ambiguity) {ImplicationMappingRule.antecedent=}
	 *     (rule start) (ambiguity) {OrMappingRule.rules+=}
	 */
	protected void emit_PrimaryMapping_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' rule=PrimaryMapping
	 *     (rule start) (ambiguity) {AndMappingRule.rules+=}
	 *     (rule start) (ambiguity) {ImplicationMappingRule.antecedent=}
	 *     (rule start) (ambiguity) {OrMappingRule.rules+=}
	 */
	protected void emit_PrimaryMapping_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' rule=Primary
	 *     (rule start) (ambiguity) 'CommandName' name=EString
	 *     (rule start) (ambiguity) 'ParentType' name=EString
	 *     (rule start) (ambiguity) 'RelationIsCyclic' (rule start)
	 *     (rule start) (ambiguity) 'RelationIsReflexiv' (rule start)
	 *     (rule start) (ambiguity) 'RelationName' name=EString
	 *     (rule start) (ambiguity) 'RelationTypesAreEqual' (rule start)
	 *     (rule start) (ambiguity) 'ShapeName' name=EString
	 *     (rule start) (ambiguity) 'ShapeType' name=EString
	 *     (rule start) (ambiguity) 'SourceType' name=EString
	 *     (rule start) (ambiguity) 'StepIn' (rule start)
	 *     (rule start) (ambiguity) 'TargetType' name=EString
	 *     (rule start) (ambiguity) 'TypeExists' name=EString
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'true' (rule start)
	 *     (rule start) (ambiguity) {AndRule.rules+=}
	 *     (rule start) (ambiguity) {ImplicationRule.antecedent=}
	 *     (rule start) (ambiguity) {OrRule.rules+=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' rule=Primary
	 *     (rule start) (ambiguity) {AndRule.rules+=}
	 *     (rule start) (ambiguity) {ImplicationRule.antecedent=}
	 *     (rule start) (ambiguity) {OrRule.rules+=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
