/*
 * generated by Xtext 2.10.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.framed.orm.editPolicy.model.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.framed.orm.editPolicy.model.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.framed.orm.editPolicy.model.dsl.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getConfigurationConfigurationParserRuleCall_0_0());
				}
				lv_configuration_0_0=ruleConfiguration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"configuration",
						lv_configuration_0_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.Configuration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_0_0());
					}
					lv_policies_1_0=rulePolicy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"policies",
							lv_policies_1_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.Policy");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_1_0());
					}
					lv_policies_2_0=rulePolicy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"policies",
							lv_policies_2_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.Policy");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRulePolicyRule
entryRulePolicyRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolicyRuleRule()); }
	iv_rulePolicyRule=rulePolicyRule
	{ $current=$iv_rulePolicyRule.current; }
	EOF;

// Rule PolicyRule
rulePolicyRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getTrueRuleParserRuleCall_0());
		}
		this_TrueRule_0=ruleTrueRule
		{
			$current = $this_TrueRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getFalseRuleParserRuleCall_1());
		}
		this_FalseRule_1=ruleFalseRule
		{
			$current = $this_FalseRule_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getCommandNameRuleParserRuleCall_2());
		}
		this_CommandNameRule_2=ruleCommandNameRule
		{
			$current = $this_CommandNameRule_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getShapeTypeRuleParserRuleCall_3());
		}
		this_ShapeTypeRule_3=ruleShapeTypeRule
		{
			$current = $this_ShapeTypeRule_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getParentTypeRuleParserRuleCall_4());
		}
		this_ParentTypeRule_4=ruleParentTypeRule
		{
			$current = $this_ParentTypeRule_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getStepInRuleParserRuleCall_5());
		}
		this_StepInRule_5=ruleStepInRule
		{
			$current = $this_StepInRule_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getSourceTypeRuleParserRuleCall_6());
		}
		this_SourceTypeRule_6=ruleSourceTypeRule
		{
			$current = $this_SourceTypeRule_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getTargetTypeRuleParserRuleCall_7());
		}
		this_TargetTypeRule_7=ruleTargetTypeRule
		{
			$current = $this_TargetTypeRule_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getRelationIsCyclicRuleParserRuleCall_8());
		}
		this_RelationIsCyclicRule_8=ruleRelationIsCyclicRule
		{
			$current = $this_RelationIsCyclicRule_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getRelationIsReflexivRuleParserRuleCall_9());
		}
		this_RelationIsReflexivRule_9=ruleRelationIsReflexivRule
		{
			$current = $this_RelationIsReflexivRule_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getRelationTypesAreEqualRuleParserRuleCall_10());
		}
		this_RelationTypesAreEqualRule_10=ruleRelationTypesAreEqualRule
		{
			$current = $this_RelationTypesAreEqualRule_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getTypeExistsRuleParserRuleCall_11());
		}
		this_TypeExistsRule_11=ruleTypeExistsRule
		{
			$current = $this_TypeExistsRule_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getShapeNameRuleParserRuleCall_12());
		}
		this_ShapeNameRule_12=ruleShapeNameRule
		{
			$current = $this_ShapeNameRule_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPolicyRuleAccess().getRelationNameRuleParserRuleCall_13());
		}
		this_RelationNameRule_13=ruleRelationNameRule
		{
			$current = $this_RelationNameRule_13.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMappingRule
entryRuleMappingRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRuleRule()); }
	iv_ruleMappingRule=ruleMappingRule
	{ $current=$iv_ruleMappingRule.current; }
	EOF;

// Rule MappingRule
ruleMappingRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMappingRuleAccess().getFeatureNameMappingRuleParserRuleCall_0());
		}
		this_FeatureNameMappingRule_0=ruleFeatureNameMappingRule
		{
			$current = $this_FeatureNameMappingRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMappingRuleAccess().getTrueMappingRuleParserRuleCall_1());
		}
		this_TrueMappingRule_1=ruleTrueMappingRule
		{
			$current = $this_TrueMappingRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	iv_ruleConfiguration=ruleConfiguration
	{ $current=$iv_ruleConfiguration.current; }
	EOF;

// Rule Configuration
ruleConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConfigurationAccess().getConfigurationAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConfigurationAccess().getMappingsMappingParserRuleCall_1_0_0());
					}
					lv_mappings_1_0=ruleMapping
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConfigurationRule());
						}
						add(
							$current,
							"mappings",
							lv_mappings_1_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.Mapping");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConfigurationAccess().getMappingsMappingParserRuleCall_1_1_0());
					}
					lv_mappings_2_0=ruleMapping
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConfigurationRule());
						}
						add(
							$current,
							"mappings",
							lv_mappings_2_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.Mapping");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRulePolicy
entryRulePolicy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolicyRule()); }
	iv_rulePolicy=rulePolicy
	{ $current=$iv_rulePolicy.current; }
	EOF;

// Rule Policy
rulePolicy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPolicyAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPolicyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPolicyAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolicyAccess().getRulePolicyExpressionParserRuleCall_2_0());
				}
				lv_rule_2_0=rulePolicyExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolicyRule());
					}
					set(
						$current,
						"rule",
						lv_rule_2_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.PolicyExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingAccess().getRuleMappingExpressionParserRuleCall_0_0());
				}
				lv_rule_0_0=ruleMappingExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRule());
					}
					set(
						$current,
						"rule",
						lv_rule_0_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.MappingExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getMappingAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMappingRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getMappingAccess().getPolicyPolicyCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleFeatureNameMappingRule
entryRuleFeatureNameMappingRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureNameMappingRuleRule()); }
	iv_ruleFeatureNameMappingRule=ruleFeatureNameMappingRule
	{ $current=$iv_ruleFeatureNameMappingRule.current; }
	EOF;

// Rule FeatureNameMappingRule
ruleFeatureNameMappingRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFeatureNameMappingRuleAccess().getFeatureNameMappingRuleAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureNameMappingRuleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureNameMappingRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTrueMappingRule
entryRuleTrueMappingRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrueMappingRuleRule()); }
	iv_ruleTrueMappingRule=ruleTrueMappingRule
	{ $current=$iv_ruleTrueMappingRule.current; }
	EOF;

// Rule TrueMappingRule
ruleTrueMappingRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTrueMappingRuleAccess().getTrueMappingRuleAction_0(),
					$current);
			}
		)
		otherlv_1='true'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrueMappingRuleAccess().getTrueKeyword_1());
		}
	)
;

// Entry rule entryRuleRelationIsCyclicRule
entryRuleRelationIsCyclicRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationIsCyclicRuleRule()); }
	iv_ruleRelationIsCyclicRule=ruleRelationIsCyclicRule
	{ $current=$iv_ruleRelationIsCyclicRule.current; }
	EOF;

// Rule RelationIsCyclicRule
ruleRelationIsCyclicRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationIsCyclicRuleAccess().getRelationIsCyclicRuleAction_0(),
					$current);
			}
		)
		otherlv_1='RelationIsCyclic'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationIsCyclicRuleAccess().getRelationIsCyclicKeyword_1());
		}
	)
;

// Entry rule entryRuleRelationTypesAreEqualRule
entryRuleRelationTypesAreEqualRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationTypesAreEqualRuleRule()); }
	iv_ruleRelationTypesAreEqualRule=ruleRelationTypesAreEqualRule
	{ $current=$iv_ruleRelationTypesAreEqualRule.current; }
	EOF;

// Rule RelationTypesAreEqualRule
ruleRelationTypesAreEqualRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationTypesAreEqualRuleAccess().getRelationTypesAreEqualRuleAction_0(),
					$current);
			}
		)
		otherlv_1='RelationTypesAreEqual'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationTypesAreEqualRuleAccess().getRelationTypesAreEqualKeyword_1());
		}
	)
;

// Entry rule entryRuleRelationIsReflexivRule
entryRuleRelationIsReflexivRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationIsReflexivRuleRule()); }
	iv_ruleRelationIsReflexivRule=ruleRelationIsReflexivRule
	{ $current=$iv_ruleRelationIsReflexivRule.current; }
	EOF;

// Rule RelationIsReflexivRule
ruleRelationIsReflexivRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationIsReflexivRuleAccess().getRelationIsReflexivRuleAction_0(),
					$current);
			}
		)
		otherlv_1='RelationIsReflexiv'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationIsReflexivRuleAccess().getRelationIsReflexivKeyword_1());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleRelationNameRule
entryRuleRelationNameRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationNameRuleRule()); }
	iv_ruleRelationNameRule=ruleRelationNameRule
	{ $current=$iv_ruleRelationNameRule.current; }
	EOF;

// Rule RelationNameRule
ruleRelationNameRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationNameRuleAccess().getRelationNameRuleAction_0(),
					$current);
			}
		)
		otherlv_1='RelationName'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationNameRuleAccess().getRelationNameKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationNameRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationNameRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeExistsRule
entryRuleTypeExistsRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeExistsRuleRule()); }
	iv_ruleTypeExistsRule=ruleTypeExistsRule
	{ $current=$iv_ruleTypeExistsRule.current; }
	EOF;

// Rule TypeExistsRule
ruleTypeExistsRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTypeExistsRuleAccess().getTypeExistsRuleAction_0(),
					$current);
			}
		)
		otherlv_1='TypeExists'
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeExistsRuleAccess().getTypeExistsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeExistsRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeExistsRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSourceTypeRule
entryRuleSourceTypeRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceTypeRuleRule()); }
	iv_ruleSourceTypeRule=ruleSourceTypeRule
	{ $current=$iv_ruleSourceTypeRule.current; }
	EOF;

// Rule SourceTypeRule
ruleSourceTypeRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSourceTypeRuleAccess().getSourceTypeRuleAction_0(),
					$current);
			}
		)
		otherlv_1='SourceType'
		{
			newLeafNode(otherlv_1, grammarAccess.getSourceTypeRuleAccess().getSourceTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceTypeRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceTypeRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTargetTypeRule
entryRuleTargetTypeRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetTypeRuleRule()); }
	iv_ruleTargetTypeRule=ruleTargetTypeRule
	{ $current=$iv_ruleTargetTypeRule.current; }
	EOF;

// Rule TargetTypeRule
ruleTargetTypeRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTargetTypeRuleAccess().getTargetTypeRuleAction_0(),
					$current);
			}
		)
		otherlv_1='TargetType'
		{
			newLeafNode(otherlv_1, grammarAccess.getTargetTypeRuleAccess().getTargetTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTargetTypeRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTargetTypeRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommandNameRule
entryRuleCommandNameRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandNameRuleRule()); }
	iv_ruleCommandNameRule=ruleCommandNameRule
	{ $current=$iv_ruleCommandNameRule.current; }
	EOF;

// Rule CommandNameRule
ruleCommandNameRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCommandNameRuleAccess().getCommandNameRuleAction_0(),
					$current);
			}
		)
		otherlv_1='CommandName'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommandNameRuleAccess().getCommandNameKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandNameRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandNameRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleShapeTypeRule
entryRuleShapeTypeRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeTypeRuleRule()); }
	iv_ruleShapeTypeRule=ruleShapeTypeRule
	{ $current=$iv_ruleShapeTypeRule.current; }
	EOF;

// Rule ShapeTypeRule
ruleShapeTypeRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapeTypeRuleAccess().getShapeTypeRuleAction_0(),
					$current);
			}
		)
		otherlv_1='ShapeType'
		{
			newLeafNode(otherlv_1, grammarAccess.getShapeTypeRuleAccess().getShapeTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeTypeRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeTypeRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParentTypeRule
entryRuleParentTypeRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParentTypeRuleRule()); }
	iv_ruleParentTypeRule=ruleParentTypeRule
	{ $current=$iv_ruleParentTypeRule.current; }
	EOF;

// Rule ParentTypeRule
ruleParentTypeRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParentTypeRuleAccess().getParentTypeRuleAction_0(),
					$current);
			}
		)
		otherlv_1='ParentType'
		{
			newLeafNode(otherlv_1, grammarAccess.getParentTypeRuleAccess().getParentTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParentTypeRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParentTypeRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStepInRule
entryRuleStepInRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepInRuleRule()); }
	iv_ruleStepInRule=ruleStepInRule
	{ $current=$iv_ruleStepInRule.current; }
	EOF;

// Rule StepInRule
ruleStepInRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStepInRuleAccess().getStepInRuleAction_0(),
					$current);
			}
		)
		otherlv_1='StepIn'
		{
			newLeafNode(otherlv_1, grammarAccess.getStepInRuleAccess().getStepInKeyword_1());
		}
	)
;

// Entry rule entryRuleTrueRule
entryRuleTrueRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrueRuleRule()); }
	iv_ruleTrueRule=ruleTrueRule
	{ $current=$iv_ruleTrueRule.current; }
	EOF;

// Rule TrueRule
ruleTrueRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTrueRuleAccess().getTrueRuleAction_0(),
					$current);
			}
		)
		otherlv_1='true'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrueRuleAccess().getTrueKeyword_1());
		}
	)
;

// Entry rule entryRuleFalseRule
entryRuleFalseRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFalseRuleRule()); }
	iv_ruleFalseRule=ruleFalseRule
	{ $current=$iv_ruleFalseRule.current; }
	EOF;

// Rule FalseRule
ruleFalseRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFalseRuleAccess().getFalseRuleAction_0(),
					$current);
			}
		)
		otherlv_1='false'
		{
			newLeafNode(otherlv_1, grammarAccess.getFalseRuleAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleShapeNameRule
entryRuleShapeNameRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeNameRuleRule()); }
	iv_ruleShapeNameRule=ruleShapeNameRule
	{ $current=$iv_ruleShapeNameRule.current; }
	EOF;

// Rule ShapeNameRule
ruleShapeNameRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapeNameRuleAccess().getShapeNameRuleAction_0(),
					$current);
			}
		)
		otherlv_1='ShapeName'
		{
			newLeafNode(otherlv_1, grammarAccess.getShapeNameRuleAccess().getShapeNameKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeNameRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeNameRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.framed.orm.editPolicy.model.dsl.Dsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMappingExpression
entryRuleMappingExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingExpressionRule()); }
	iv_ruleMappingExpression=ruleMappingExpression
	{ $current=$iv_ruleMappingExpression.current; }
	EOF;

// Rule MappingExpression
ruleMappingExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getMappingExpressionAccess().getImplicationMappingParserRuleCall());
	}
	this_ImplicationMapping_0=ruleImplicationMapping
	{
		$current = $this_ImplicationMapping_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleImplicationMapping
entryRuleImplicationMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplicationMappingRule()); }
	iv_ruleImplicationMapping=ruleImplicationMapping
	{ $current=$iv_ruleImplicationMapping.current; }
	EOF;

// Rule ImplicationMapping
ruleImplicationMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImplicationMappingAccess().getOrMappingParserRuleCall_0());
		}
		this_OrMapping_0=ruleOrMapping
		{
			$current = $this_OrMapping_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImplicationMappingAccess().getImplicationMappingRuleAntecedentAction_1_0(),
						$current);
				}
			)
			otherlv_2='=>'
			{
				newLeafNode(otherlv_2, grammarAccess.getImplicationMappingAccess().getEqualsSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImplicationMappingAccess().getConsequentOrMappingParserRuleCall_1_2_0());
					}
					lv_consequent_3_0=ruleOrMapping
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImplicationMappingRule());
						}
						set(
							$current,
							"consequent",
							lv_consequent_3_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.OrMapping");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOrMapping
entryRuleOrMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrMappingRule()); }
	iv_ruleOrMapping=ruleOrMapping
	{ $current=$iv_ruleOrMapping.current; }
	EOF;

// Rule OrMapping
ruleOrMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrMappingAccess().getAndMappingParserRuleCall_0());
		}
		this_AndMapping_0=ruleAndMapping
		{
			$current = $this_AndMapping_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getOrMappingAccess().getOrMappingRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrMappingAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrMappingAccess().getRulesAndMappingParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleAndMapping
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrMappingRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.AndMapping");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndMapping
entryRuleAndMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndMappingRule()); }
	iv_ruleAndMapping=ruleAndMapping
	{ $current=$iv_ruleAndMapping.current; }
	EOF;

// Rule AndMapping
ruleAndMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndMappingAccess().getNotMappingExpressionParserRuleCall_0());
		}
		this_NotMappingExpression_0=ruleNotMappingExpression
		{
			$current = $this_NotMappingExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndMappingAccess().getAndMappingRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndMappingAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndMappingAccess().getRulesNotMappingExpressionParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleNotMappingExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndMappingRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.NotMappingExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNotMappingExpression
entryRuleNotMappingExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotMappingExpressionRule()); }
	iv_ruleNotMappingExpression=ruleNotMappingExpression
	{ $current=$iv_ruleNotMappingExpression.current; }
	EOF;

// Rule NotMappingExpression
ruleNotMappingExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNotMappingExpressionAccess().getPrimaryMappingParserRuleCall_0());
		}
		this_PrimaryMapping_0=rulePrimaryMapping
		{
			$current = $this_PrimaryMapping_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotMappingExpressionAccess().getExclamationMarkKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotMappingExpressionAccess().getNotMappingRuleAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNotMappingExpressionAccess().getRulePrimaryMappingParserRuleCall_1_2_0());
					}
					lv_rule_3_0=rulePrimaryMapping
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotMappingExpressionRule());
						}
						set(
							$current,
							"rule",
							lv_rule_3_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.PrimaryMapping");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePrimaryMapping
entryRulePrimaryMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryMappingRule()); }
	iv_rulePrimaryMapping=rulePrimaryMapping
	{ $current=$iv_rulePrimaryMapping.current; }
	EOF;

// Rule PrimaryMapping
rulePrimaryMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryMappingAccess().getMappingRuleParserRuleCall_0());
		}
		this_MappingRule_0=ruleMappingRule
		{
			$current = $this_MappingRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryMappingAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryMappingAccess().getMappingExpressionParserRuleCall_1_1());
			}
			this_MappingExpression_2=ruleMappingExpression
			{
				$current = $this_MappingExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryMappingAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRulePolicyExpression
entryRulePolicyExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolicyExpressionRule()); }
	iv_rulePolicyExpression=rulePolicyExpression
	{ $current=$iv_rulePolicyExpression.current; }
	EOF;

// Rule PolicyExpression
rulePolicyExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPolicyExpressionAccess().getImplicationPolicyParserRuleCall());
	}
	this_ImplicationPolicy_0=ruleImplicationPolicy
	{
		$current = $this_ImplicationPolicy_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleImplicationPolicy
entryRuleImplicationPolicy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplicationPolicyRule()); }
	iv_ruleImplicationPolicy=ruleImplicationPolicy
	{ $current=$iv_ruleImplicationPolicy.current; }
	EOF;

// Rule ImplicationPolicy
ruleImplicationPolicy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImplicationPolicyAccess().getOrPolicyParserRuleCall_0());
		}
		this_OrPolicy_0=ruleOrPolicy
		{
			$current = $this_OrPolicy_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImplicationPolicyAccess().getImplicationRuleAntecedentAction_1_0(),
						$current);
				}
			)
			otherlv_2='=>'
			{
				newLeafNode(otherlv_2, grammarAccess.getImplicationPolicyAccess().getEqualsSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImplicationPolicyAccess().getConsequentOrPolicyParserRuleCall_1_2_0());
					}
					lv_consequent_3_0=ruleOrPolicy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImplicationPolicyRule());
						}
						set(
							$current,
							"consequent",
							lv_consequent_3_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.OrPolicy");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOrPolicy
entryRuleOrPolicy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrPolicyRule()); }
	iv_ruleOrPolicy=ruleOrPolicy
	{ $current=$iv_ruleOrPolicy.current; }
	EOF;

// Rule OrPolicy
ruleOrPolicy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrPolicyAccess().getAndPolicyParserRuleCall_0());
		}
		this_AndPolicy_0=ruleAndPolicy
		{
			$current = $this_AndPolicy_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getOrPolicyAccess().getOrRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrPolicyAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrPolicyAccess().getRulesAndPolicyParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleAndPolicy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrPolicyRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.AndPolicy");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndPolicy
entryRuleAndPolicy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndPolicyRule()); }
	iv_ruleAndPolicy=ruleAndPolicy
	{ $current=$iv_ruleAndPolicy.current; }
	EOF;

// Rule AndPolicy
ruleAndPolicy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndPolicyAccess().getNotExpressionParserRuleCall_0());
		}
		this_NotExpression_0=ruleNotExpression
		{
			$current = $this_NotExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndPolicyAccess().getAndRuleRulesAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndPolicyAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndPolicyAccess().getRulesNotExpressionParserRuleCall_1_2_0());
					}
					lv_rules_3_0=ruleNotExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndPolicyRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.NotExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	iv_ruleNotExpression=ruleNotExpression
	{ $current=$iv_ruleNotExpression.current; }
	EOF;

// Rule NotExpression
ruleNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNotExpressionAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='!'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotExpressionAccess().getNotRuleAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNotExpressionAccess().getRulePrimaryParserRuleCall_1_2_0());
					}
					lv_rule_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotExpressionRule());
						}
						set(
							$current,
							"rule",
							lv_rule_3_0,
							"org.framed.orm.editPolicy.model.dsl.Dsl.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getPolicyRuleParserRuleCall_0());
		}
		this_PolicyRule_0=rulePolicyRule
		{
			$current = $this_PolicyRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getPolicyExpressionParserRuleCall_1_1());
			}
			this_PolicyExpression_2=rulePolicyExpression
			{
				$current = $this_PolicyExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
