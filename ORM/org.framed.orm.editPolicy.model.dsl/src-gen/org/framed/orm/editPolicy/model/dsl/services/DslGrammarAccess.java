/*
 * generated by Xtext 2.10.0
 */
package org.framed.orm.editPolicy.model.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConfigurationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConfigurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigurationConfigurationParserRuleCall_3_0 = (RuleCall)cConfigurationAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPoliciesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPoliciesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPoliciesPolicyParserRuleCall_4_2_0 = (RuleCall)cPoliciesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cPoliciesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cPoliciesPolicyParserRuleCall_4_3_1_0 = (RuleCall)cPoliciesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Model:
		//	'Model'
		//	'{'
		//	'configuration' configuration=Configuration ('policies' '{' policies+=Policy ("," policies+=Policy)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Model' '{' 'configuration' configuration=Configuration ('policies' '{' policies+=Policy ("," policies+=Policy)* '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_2() { return cConfigurationKeyword_2; }
		
		//configuration=Configuration
		public Assignment getConfigurationAssignment_3() { return cConfigurationAssignment_3; }
		
		//Configuration
		public RuleCall getConfigurationConfigurationParserRuleCall_3_0() { return cConfigurationConfigurationParserRuleCall_3_0; }
		
		//('policies' '{' policies+=Policy ("," policies+=Policy)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'policies'
		public Keyword getPoliciesKeyword_4_0() { return cPoliciesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//policies+=Policy
		public Assignment getPoliciesAssignment_4_2() { return cPoliciesAssignment_4_2; }
		
		//Policy
		public RuleCall getPoliciesPolicyParserRuleCall_4_2_0() { return cPoliciesPolicyParserRuleCall_4_2_0; }
		
		//("," policies+=Policy)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//policies+=Policy
		public Assignment getPoliciesAssignment_4_3_1() { return cPoliciesAssignment_4_3_1; }
		
		//Policy
		public RuleCall getPoliciesPolicyParserRuleCall_4_3_1_0() { return cPoliciesPolicyParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AbstractRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.AbstractRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationNameRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNotRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImplicationRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSourceTypeRuleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTargetTypeRuleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCommandNameRuleParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cShapeTypeRuleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cParentTypeRuleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cStepInRuleParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTrueRuleParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cFalseRuleParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cShapeNameRuleParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cRelationIsCyclicRuleParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cRelationIsReflexivRuleParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cRelationTypesAreEqualRuleParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//AbstractRule:
		//	AndRule | RelationNameRule | OrRule | NotRule | ImplicationRule | SourceTypeRule | TargetTypeRule | CommandNameRule |
		//	ShapeTypeRule | ParentTypeRule | StepInRule | TrueRule | FalseRule | ShapeNameRule | RelationIsCyclicRule |
		//	RelationIsReflexivRule | RelationTypesAreEqualRule;
		@Override public ParserRule getRule() { return rule; }
		
		//AndRule | RelationNameRule | OrRule | NotRule | ImplicationRule | SourceTypeRule | TargetTypeRule | CommandNameRule |
		//ShapeTypeRule | ParentTypeRule | StepInRule | TrueRule | FalseRule | ShapeNameRule | RelationIsCyclicRule |
		//RelationIsReflexivRule | RelationTypesAreEqualRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AndRule
		public RuleCall getAndRuleParserRuleCall_0() { return cAndRuleParserRuleCall_0; }
		
		//RelationNameRule
		public RuleCall getRelationNameRuleParserRuleCall_1() { return cRelationNameRuleParserRuleCall_1; }
		
		//OrRule
		public RuleCall getOrRuleParserRuleCall_2() { return cOrRuleParserRuleCall_2; }
		
		//NotRule
		public RuleCall getNotRuleParserRuleCall_3() { return cNotRuleParserRuleCall_3; }
		
		//ImplicationRule
		public RuleCall getImplicationRuleParserRuleCall_4() { return cImplicationRuleParserRuleCall_4; }
		
		//SourceTypeRule
		public RuleCall getSourceTypeRuleParserRuleCall_5() { return cSourceTypeRuleParserRuleCall_5; }
		
		//TargetTypeRule
		public RuleCall getTargetTypeRuleParserRuleCall_6() { return cTargetTypeRuleParserRuleCall_6; }
		
		//CommandNameRule
		public RuleCall getCommandNameRuleParserRuleCall_7() { return cCommandNameRuleParserRuleCall_7; }
		
		//ShapeTypeRule
		public RuleCall getShapeTypeRuleParserRuleCall_8() { return cShapeTypeRuleParserRuleCall_8; }
		
		//ParentTypeRule
		public RuleCall getParentTypeRuleParserRuleCall_9() { return cParentTypeRuleParserRuleCall_9; }
		
		//StepInRule
		public RuleCall getStepInRuleParserRuleCall_10() { return cStepInRuleParserRuleCall_10; }
		
		//TrueRule
		public RuleCall getTrueRuleParserRuleCall_11() { return cTrueRuleParserRuleCall_11; }
		
		//FalseRule
		public RuleCall getFalseRuleParserRuleCall_12() { return cFalseRuleParserRuleCall_12; }
		
		//ShapeNameRule
		public RuleCall getShapeNameRuleParserRuleCall_13() { return cShapeNameRuleParserRuleCall_13; }
		
		//RelationIsCyclicRule
		public RuleCall getRelationIsCyclicRuleParserRuleCall_14() { return cRelationIsCyclicRuleParserRuleCall_14; }
		
		//RelationIsReflexivRule
		public RuleCall getRelationIsReflexivRuleParserRuleCall_15() { return cRelationIsReflexivRuleParserRuleCall_15; }
		
		//RelationTypesAreEqualRule
		public RuleCall getRelationTypesAreEqualRuleParserRuleCall_16() { return cRelationTypesAreEqualRuleParserRuleCall_16; }
	}
	public class AbstractMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.AbstractMappingRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureNameMappingRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAndMappingRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNotMappingRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrMappingRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImplicationMappingRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTrueMappingRuleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AbstractMappingRule:
		//	FeatureNameMappingRule | AndMappingRule | NotMappingRule | OrMappingRule | ImplicationMappingRule | TrueMappingRule;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureNameMappingRule | AndMappingRule | NotMappingRule | OrMappingRule | ImplicationMappingRule | TrueMappingRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureNameMappingRule
		public RuleCall getFeatureNameMappingRuleParserRuleCall_0() { return cFeatureNameMappingRuleParserRuleCall_0; }
		
		//AndMappingRule
		public RuleCall getAndMappingRuleParserRuleCall_1() { return cAndMappingRuleParserRuleCall_1; }
		
		//NotMappingRule
		public RuleCall getNotMappingRuleParserRuleCall_2() { return cNotMappingRuleParserRuleCall_2; }
		
		//OrMappingRule
		public RuleCall getOrMappingRuleParserRuleCall_3() { return cOrMappingRuleParserRuleCall_3; }
		
		//ImplicationMappingRule
		public RuleCall getImplicationMappingRuleParserRuleCall_4() { return cImplicationMappingRuleParserRuleCall_4; }
		
		//TrueMappingRule
		public RuleCall getTrueMappingRuleParserRuleCall_5() { return cTrueMappingRuleParserRuleCall_5; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMappingsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMappingsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMappingsMappingParserRuleCall_3_2_0 = (RuleCall)cMappingsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cMappingsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cMappingsMappingParserRuleCall_3_3_1_0 = (RuleCall)cMappingsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Configuration:
		//	{Configuration}
		//	'Configuration'
		//	'{' ('mappings' '{' mappings+=Mapping ("," mappings+=Mapping)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Configuration} 'Configuration' '{' ('mappings' '{' mappings+=Mapping ("," mappings+=Mapping)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Configuration}
		public Action getConfigurationAction_0() { return cConfigurationAction_0; }
		
		//'Configuration'
		public Keyword getConfigurationKeyword_1() { return cConfigurationKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('mappings' '{' mappings+=Mapping ("," mappings+=Mapping)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'mappings'
		public Keyword getMappingsKeyword_3_0() { return cMappingsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//mappings+=Mapping
		public Assignment getMappingsAssignment_3_2() { return cMappingsAssignment_3_2; }
		
		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_3_2_0() { return cMappingsMappingParserRuleCall_3_2_0; }
		
		//("," mappings+=Mapping)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//mappings+=Mapping
		public Assignment getMappingsAssignment_3_3_1() { return cMappingsAssignment_3_3_1; }
		
		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_3_3_1_0() { return cMappingsMappingParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolicyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleAbstractRuleParserRuleCall_3_0 = (RuleCall)cRuleAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Policy:
		//	'Policy'
		//	name=ID
		//	'{'
		//	rule=AbstractRule
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Policy' name=ID '{' rule=AbstractRule '}'
		public Group getGroup() { return cGroup; }
		
		//'Policy'
		public Keyword getPolicyKeyword_0() { return cPolicyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//rule=AbstractRule
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//AbstractRule
		public RuleCall getRuleAbstractRuleParserRuleCall_3_0() { return cRuleAbstractRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cRuleAlternatives_3_0 = (Alternatives)cRuleAssignment_3.eContents().get(0);
		private final RuleCall cRuleAbstractMappingRuleParserRuleCall_3_0_0 = (RuleCall)cRuleAlternatives_3_0.eContents().get(0);
		private final RuleCall cRuleMappingExpressionParserRuleCall_3_0_1 = (RuleCall)cRuleAlternatives_3_0.eContents().get(1);
		private final Keyword cPolicyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPolicyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cPolicyPolicyCrossReference_5_0 = (CrossReference)cPolicyAssignment_5.eContents().get(0);
		private final RuleCall cPolicyPolicyIDTerminalRuleCall_5_0_1 = (RuleCall)cPolicyPolicyCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Mapping:
		//	'Mapping'
		//	'{'
		//	'rule' rule=(AbstractMappingRule | MappingExpression)
		//	'policy' policy=[Policy]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mapping' '{' 'rule' rule=(AbstractMappingRule | MappingExpression) 'policy' policy=[Policy] '}'
		public Group getGroup() { return cGroup; }
		
		//'Mapping'
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'rule'
		public Keyword getRuleKeyword_2() { return cRuleKeyword_2; }
		
		//rule=(AbstractMappingRule | MappingExpression)
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//(AbstractMappingRule | MappingExpression)
		public Alternatives getRuleAlternatives_3_0() { return cRuleAlternatives_3_0; }
		
		//AbstractMappingRule
		public RuleCall getRuleAbstractMappingRuleParserRuleCall_3_0_0() { return cRuleAbstractMappingRuleParserRuleCall_3_0_0; }
		
		//MappingExpression
		public RuleCall getRuleMappingExpressionParserRuleCall_3_0_1() { return cRuleMappingExpressionParserRuleCall_3_0_1; }
		
		//'policy'
		public Keyword getPolicyKeyword_4() { return cPolicyKeyword_4; }
		
		//policy=[Policy]
		public Assignment getPolicyAssignment_5() { return cPolicyAssignment_5; }
		
		//[Policy]
		public CrossReference getPolicyPolicyCrossReference_5_0() { return cPolicyPolicyCrossReference_5_0; }
		
		//ID
		public RuleCall getPolicyPolicyIDTerminalRuleCall_5_0_1() { return cPolicyPolicyIDTerminalRuleCall_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FeatureNameMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.FeatureNameMappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureNameMappingRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFeatureNameMappingRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FeatureNameMappingRule:
		//	{FeatureNameMappingRule}
		//	'FeatureNameMappingRule'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{FeatureNameMappingRule} 'FeatureNameMappingRule' name=EString
		public Group getGroup() { return cGroup; }
		
		//{FeatureNameMappingRule}
		public Action getFeatureNameMappingRuleAction_0() { return cFeatureNameMappingRuleAction_0; }
		
		//'FeatureNameMappingRule'
		public Keyword getFeatureNameMappingRuleKeyword_1() { return cFeatureNameMappingRuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class AndMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.AndMappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndMappingRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesAbstractMappingRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRulesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRulesAbstractMappingRuleParserRuleCall_3_1_0 = (RuleCall)cRulesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AndMappingRule:
		//	'AndMappingRule'
		//	'{'
		//	rules+=AbstractMappingRule ("," rules+=AbstractMappingRule)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AndMappingRule' '{' rules+=AbstractMappingRule ("," rules+=AbstractMappingRule)* '}'
		public Group getGroup() { return cGroup; }
		
		//'AndMappingRule'
		public Keyword getAndMappingRuleKeyword_0() { return cAndMappingRuleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//rules+=AbstractMappingRule
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//AbstractMappingRule
		public RuleCall getRulesAbstractMappingRuleParserRuleCall_2_0() { return cRulesAbstractMappingRuleParserRuleCall_2_0; }
		
		//("," rules+=AbstractMappingRule)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//rules+=AbstractMappingRule
		public Assignment getRulesAssignment_3_1() { return cRulesAssignment_3_1; }
		
		//AbstractMappingRule
		public RuleCall getRulesAbstractMappingRuleParserRuleCall_3_1_0() { return cRulesAbstractMappingRuleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NotMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.NotMappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleAbstractMappingRuleParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//NotMappingRule:
		//	'!' rule=AbstractMappingRule;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' rule=AbstractMappingRule
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//rule=AbstractMappingRule
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }
		
		//AbstractMappingRule
		public RuleCall getRuleAbstractMappingRuleParserRuleCall_1_0() { return cRuleAbstractMappingRuleParserRuleCall_1_0; }
	}
	public class OrMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.OrMappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrMappingRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesAbstractMappingRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRulesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRulesAbstractMappingRuleParserRuleCall_3_1_0 = (RuleCall)cRulesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrMappingRule:
		//	'OrMappingRule'
		//	'{'
		//	rules+=AbstractMappingRule ("," rules+=AbstractMappingRule)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'OrMappingRule' '{' rules+=AbstractMappingRule ("," rules+=AbstractMappingRule)* '}'
		public Group getGroup() { return cGroup; }
		
		//'OrMappingRule'
		public Keyword getOrMappingRuleKeyword_0() { return cOrMappingRuleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//rules+=AbstractMappingRule
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//AbstractMappingRule
		public RuleCall getRulesAbstractMappingRuleParserRuleCall_2_0() { return cRulesAbstractMappingRuleParserRuleCall_2_0; }
		
		//("," rules+=AbstractMappingRule)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//rules+=AbstractMappingRule
		public Assignment getRulesAssignment_3_1() { return cRulesAssignment_3_1; }
		
		//AbstractMappingRule
		public RuleCall getRulesAbstractMappingRuleParserRuleCall_3_1_0() { return cRulesAbstractMappingRuleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ImplicationMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ImplicationMappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplicationMappingRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAntecedentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAntecedentAbstractMappingRuleParserRuleCall_3_0 = (RuleCall)cAntecedentAssignment_3.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConsequentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConsequentAbstractMappingRuleParserRuleCall_5_0 = (RuleCall)cConsequentAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ImplicationMappingRule:
		//	'ImplicationMappingRule'
		//	'{'
		//	'if' antecedent=AbstractMappingRule
		//	'then' consequent=AbstractMappingRule
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ImplicationMappingRule' '{' 'if' antecedent=AbstractMappingRule 'then' consequent=AbstractMappingRule '}'
		public Group getGroup() { return cGroup; }
		
		//'ImplicationMappingRule'
		public Keyword getImplicationMappingRuleKeyword_0() { return cImplicationMappingRuleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'if'
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }
		
		//antecedent=AbstractMappingRule
		public Assignment getAntecedentAssignment_3() { return cAntecedentAssignment_3; }
		
		//AbstractMappingRule
		public RuleCall getAntecedentAbstractMappingRuleParserRuleCall_3_0() { return cAntecedentAbstractMappingRuleParserRuleCall_3_0; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//consequent=AbstractMappingRule
		public Assignment getConsequentAssignment_5() { return cConsequentAssignment_5; }
		
		//AbstractMappingRule
		public RuleCall getConsequentAbstractMappingRuleParserRuleCall_5_0() { return cConsequentAbstractMappingRuleParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TrueMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.TrueMappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrueMappingRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrueMappingRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TrueMappingRule:
		//	{TrueMappingRule}
		//	'TrueMappingRule';
		@Override public ParserRule getRule() { return rule; }
		
		//{TrueMappingRule} 'TrueMappingRule'
		public Group getGroup() { return cGroup; }
		
		//{TrueMappingRule}
		public Action getTrueMappingRuleAction_0() { return cTrueMappingRuleAction_0; }
		
		//'TrueMappingRule'
		public Keyword getTrueMappingRuleKeyword_1() { return cTrueMappingRuleKeyword_1; }
	}
	public class RelationIsCyclicRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.RelationIsCyclicRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationIsCyclicRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationIsCyclicRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RelationIsCyclicRule:
		//	{RelationIsCyclicRule}
		//	'RelationIsCyclicRule';
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationIsCyclicRule} 'RelationIsCyclicRule'
		public Group getGroup() { return cGroup; }
		
		//{RelationIsCyclicRule}
		public Action getRelationIsCyclicRuleAction_0() { return cRelationIsCyclicRuleAction_0; }
		
		//'RelationIsCyclicRule'
		public Keyword getRelationIsCyclicRuleKeyword_1() { return cRelationIsCyclicRuleKeyword_1; }
	}
	public class RelationTypesAreEqualRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.RelationTypesAreEqualRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationTypesAreEqualRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationTypesAreEqualRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RelationTypesAreEqualRule:
		//	{RelationTypesAreEqualRule}
		//	'RelationTypesAreEqualRule';
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationTypesAreEqualRule} 'RelationTypesAreEqualRule'
		public Group getGroup() { return cGroup; }
		
		//{RelationTypesAreEqualRule}
		public Action getRelationTypesAreEqualRuleAction_0() { return cRelationTypesAreEqualRuleAction_0; }
		
		//'RelationTypesAreEqualRule'
		public Keyword getRelationTypesAreEqualRuleKeyword_1() { return cRelationTypesAreEqualRuleKeyword_1; }
	}
	public class RelationIsReflexivRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.RelationIsReflexivRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationIsReflexivRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationIsReflexivRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RelationIsReflexivRule:
		//	{RelationIsReflexivRule}
		//	'RelationIsReflexivRule';
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationIsReflexivRule} 'RelationIsReflexivRule'
		public Group getGroup() { return cGroup; }
		
		//{RelationIsReflexivRule}
		public Action getRelationIsReflexivRuleAction_0() { return cRelationIsReflexivRuleAction_0; }
		
		//'RelationIsReflexivRule'
		public Keyword getRelationIsReflexivRuleKeyword_1() { return cRelationIsReflexivRuleKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AndRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.AndRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesAbstractRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRulesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRulesAbstractRuleParserRuleCall_3_1_0 = (RuleCall)cRulesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AndRule:
		//	'AndRule'
		//	'{'
		//	rules+=AbstractRule ("," rules+=AbstractRule)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AndRule' '{' rules+=AbstractRule ("," rules+=AbstractRule)* '}'
		public Group getGroup() { return cGroup; }
		
		//'AndRule'
		public Keyword getAndRuleKeyword_0() { return cAndRuleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//rules+=AbstractRule
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//AbstractRule
		public RuleCall getRulesAbstractRuleParserRuleCall_2_0() { return cRulesAbstractRuleParserRuleCall_2_0; }
		
		//("," rules+=AbstractRule)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//rules+=AbstractRule
		public Assignment getRulesAssignment_3_1() { return cRulesAssignment_3_1; }
		
		//AbstractRule
		public RuleCall getRulesAbstractRuleParserRuleCall_3_1_0() { return cRulesAbstractRuleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RelationNameRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.RelationNameRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationNameRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationNameRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//RelationNameRule:
		//	{RelationNameRule}
		//	'RelationNameRule'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationNameRule} 'RelationNameRule' name=EString
		public Group getGroup() { return cGroup; }
		
		//{RelationNameRule}
		public Action getRelationNameRuleAction_0() { return cRelationNameRuleAction_0; }
		
		//'RelationNameRule'
		public Keyword getRelationNameRuleKeyword_1() { return cRelationNameRuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class OrRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.OrRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesAbstractRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRulesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRulesAbstractRuleParserRuleCall_3_1_0 = (RuleCall)cRulesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrRule:
		//	'OrRule'
		//	'{'
		//	rules+=AbstractRule ("," rules+=AbstractRule)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'OrRule' '{' rules+=AbstractRule ("," rules+=AbstractRule)* '}'
		public Group getGroup() { return cGroup; }
		
		//'OrRule'
		public Keyword getOrRuleKeyword_0() { return cOrRuleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//rules+=AbstractRule
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//AbstractRule
		public RuleCall getRulesAbstractRuleParserRuleCall_2_0() { return cRulesAbstractRuleParserRuleCall_2_0; }
		
		//("," rules+=AbstractRule)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//rules+=AbstractRule
		public Assignment getRulesAssignment_3_1() { return cRulesAssignment_3_1; }
		
		//AbstractRule
		public RuleCall getRulesAbstractRuleParserRuleCall_3_1_0() { return cRulesAbstractRuleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NotRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.NotRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleAbstractRuleParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NotRule:
		//	'NotRule'
		//	'{'
		//	rule=AbstractRule
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'NotRule' '{' rule=AbstractRule '}'
		public Group getGroup() { return cGroup; }
		
		//'NotRule'
		public Keyword getNotRuleKeyword_0() { return cNotRuleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//rule=AbstractRule
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//AbstractRule
		public RuleCall getRuleAbstractRuleParserRuleCall_2_0() { return cRuleAbstractRuleParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ImplicationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ImplicationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplicationRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAntecedentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAntecedentAbstractRuleParserRuleCall_3_0 = (RuleCall)cAntecedentAssignment_3.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConsequentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConsequentAbstractRuleParserRuleCall_5_0 = (RuleCall)cConsequentAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ImplicationRule:
		//	'ImplicationRule'
		//	'{'
		//	'if' antecedent=AbstractRule
		//	'then' consequent=AbstractRule
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ImplicationRule' '{' 'if' antecedent=AbstractRule 'then' consequent=AbstractRule '}'
		public Group getGroup() { return cGroup; }
		
		//'ImplicationRule'
		public Keyword getImplicationRuleKeyword_0() { return cImplicationRuleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'if'
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }
		
		//antecedent=AbstractRule
		public Assignment getAntecedentAssignment_3() { return cAntecedentAssignment_3; }
		
		//AbstractRule
		public RuleCall getAntecedentAbstractRuleParserRuleCall_3_0() { return cAntecedentAbstractRuleParserRuleCall_3_0; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//consequent=AbstractRule
		public Assignment getConsequentAssignment_5() { return cConsequentAssignment_5; }
		
		//AbstractRule
		public RuleCall getConsequentAbstractRuleParserRuleCall_5_0() { return cConsequentAbstractRuleParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SourceTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.SourceTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSourceTypeRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//SourceTypeRule:
		//	{SourceTypeRule}
		//	'SourceTypeRule'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{SourceTypeRule} 'SourceTypeRule' name=EString
		public Group getGroup() { return cGroup; }
		
		//{SourceTypeRule}
		public Action getSourceTypeRuleAction_0() { return cSourceTypeRuleAction_0; }
		
		//'SourceTypeRule'
		public Keyword getSourceTypeRuleKeyword_1() { return cSourceTypeRuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class TargetTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.TargetTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTargetTypeRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TargetTypeRule:
		//	{TargetTypeRule}
		//	'TargetTypeRule'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{TargetTypeRule} 'TargetTypeRule' name=EString
		public Group getGroup() { return cGroup; }
		
		//{TargetTypeRule}
		public Action getTargetTypeRuleAction_0() { return cTargetTypeRuleAction_0; }
		
		//'TargetTypeRule'
		public Keyword getTargetTypeRuleKeyword_1() { return cTargetTypeRuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class CommandNameRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.CommandNameRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandNameRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommandNameRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//CommandNameRule:
		//	{CommandNameRule}
		//	'CommandNameRule'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{CommandNameRule} 'CommandNameRule' name=EString
		public Group getGroup() { return cGroup; }
		
		//{CommandNameRule}
		public Action getCommandNameRuleAction_0() { return cCommandNameRuleAction_0; }
		
		//'CommandNameRule'
		public Keyword getCommandNameRuleKeyword_1() { return cCommandNameRuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class ShapeTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ShapeTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShapeTypeRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ShapeTypeRule:
		//	{ShapeTypeRule}
		//	'ShapeTypeRule'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeTypeRule} 'ShapeTypeRule' name=EString
		public Group getGroup() { return cGroup; }
		
		//{ShapeTypeRule}
		public Action getShapeTypeRuleAction_0() { return cShapeTypeRuleAction_0; }
		
		//'ShapeTypeRule'
		public Keyword getShapeTypeRuleKeyword_1() { return cShapeTypeRuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class ParentTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ParentTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParentTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParentTypeRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ParentTypeRule:
		//	{ParentTypeRule}
		//	'ParentTypeRule'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParentTypeRule} 'ParentTypeRule' name=EString
		public Group getGroup() { return cGroup; }
		
		//{ParentTypeRule}
		public Action getParentTypeRuleAction_0() { return cParentTypeRuleAction_0; }
		
		//'ParentTypeRule'
		public Keyword getParentTypeRuleKeyword_1() { return cParentTypeRuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class StepInRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.StepInRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStepInRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStepInRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StepInRule:
		//	{StepInRule}
		//	'StepInRule';
		@Override public ParserRule getRule() { return rule; }
		
		//{StepInRule} 'StepInRule'
		public Group getGroup() { return cGroup; }
		
		//{StepInRule}
		public Action getStepInRuleAction_0() { return cStepInRuleAction_0; }
		
		//'StepInRule'
		public Keyword getStepInRuleKeyword_1() { return cStepInRuleKeyword_1; }
	}
	public class TrueRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.TrueRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrueRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrueRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TrueRule:
		//	{TrueRule}
		//	'TrueRule';
		@Override public ParserRule getRule() { return rule; }
		
		//{TrueRule} 'TrueRule'
		public Group getGroup() { return cGroup; }
		
		//{TrueRule}
		public Action getTrueRuleAction_0() { return cTrueRuleAction_0; }
		
		//'TrueRule'
		public Keyword getTrueRuleKeyword_1() { return cTrueRuleKeyword_1; }
	}
	public class FalseRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.FalseRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFalseRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFalseRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FalseRule:
		//	{FalseRule}
		//	'FalseRule';
		@Override public ParserRule getRule() { return rule; }
		
		//{FalseRule} 'FalseRule'
		public Group getGroup() { return cGroup; }
		
		//{FalseRule}
		public Action getFalseRuleAction_0() { return cFalseRuleAction_0; }
		
		//'FalseRule'
		public Keyword getFalseRuleKeyword_1() { return cFalseRuleKeyword_1; }
	}
	public class ShapeNameRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ShapeNameRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeNameRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShapeNameRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ShapeNameRule:
		//	{ShapeNameRule}
		//	'ShapeNameRule'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeNameRule} 'ShapeNameRule' name=EString
		public Group getGroup() { return cGroup; }
		
		//{ShapeNameRule}
		public Action getShapeNameRuleAction_0() { return cShapeNameRuleAction_0; }
		
		//'ShapeNameRule'
		public Keyword getShapeNameRuleKeyword_1() { return cShapeNameRuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class MappingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.MappingExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cNotMappingRuleAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRuleAndMappingParserRuleCall_1_2_0 = (RuleCall)cRuleAssignment_1_2.eContents().get(0);
		
		////TODO, FIXME
		//MappingExpression AbstractMappingRule:
		//	AndMapping | '!' {NotMappingRule} rule=AndMapping
		@Override public ParserRule getRule() { return rule; }
		
		//AndMapping | '!' {NotMappingRule} rule=AndMapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AndMapping
		public RuleCall getAndMappingParserRuleCall_0() { return cAndMappingParserRuleCall_0; }
		
		//'!' {NotMappingRule} rule=AndMapping
		public Group getGroup_1() { return cGroup_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//{NotMappingRule}
		public Action getNotMappingRuleAction_1_1() { return cNotMappingRuleAction_1_1; }
		
		//rule=AndMapping
		public Assignment getRuleAssignment_1_2() { return cRuleAssignment_1_2; }
		
		//AndMapping
		public RuleCall getRuleAndMappingParserRuleCall_1_2_0() { return cRuleAndMappingParserRuleCall_1_2_0; }
	}
	public class AndMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.AndMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrMappingParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndMappingRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesOrMappingParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//AndMapping AbstractMappingRule:
		//	OrMapping ({AndMappingRule.rules+=current} '&&' rules+=OrMapping)*
		@Override public ParserRule getRule() { return rule; }
		
		//OrMapping ({AndMappingRule.rules+=current} '&&' rules+=OrMapping)*
		public Group getGroup() { return cGroup; }
		
		//OrMapping
		public RuleCall getOrMappingParserRuleCall_0() { return cOrMappingParserRuleCall_0; }
		
		//({AndMappingRule.rules+=current} '&&' rules+=OrMapping)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndMappingRule.rules+=current}
		public Action getAndMappingRuleRulesAction_1_0() { return cAndMappingRuleRulesAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//rules+=OrMapping
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//OrMapping
		public RuleCall getRulesOrMappingParserRuleCall_1_2_0() { return cRulesOrMappingParserRuleCall_1_2_0; }
	}
	public class OrMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.OrMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrMappingRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesPrimaryParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//OrMapping AbstractMappingRule:
		//	Primary ({OrMappingRule.rules+=current} '||' rules+=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({OrMappingRule.rules+=current} '||' rules+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({OrMappingRule.rules+=current} '||' rules+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrMappingRule.rules+=current}
		public Action getOrMappingRuleRulesAction_1_0() { return cOrMappingRuleRulesAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//rules+=Primary
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//Primary
		public RuleCall getRulesPrimaryParserRuleCall_1_2_0() { return cRulesPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrueMappingRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureNameMappingRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cMappingExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primary AbstractMappingRule:
		//	TrueMappingRule | FeatureNameMappingRule |
		//	'(' MappingExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//TrueMappingRule | FeatureNameMappingRule | '(' MappingExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TrueMappingRule
		public RuleCall getTrueMappingRuleParserRuleCall_0() { return cTrueMappingRuleParserRuleCall_0; }
		
		//FeatureNameMappingRule
		public RuleCall getFeatureNameMappingRuleParserRuleCall_1() { return cFeatureNameMappingRuleParserRuleCall_1; }
		
		//'(' MappingExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//MappingExpression
		public RuleCall getMappingExpressionParserRuleCall_2_1() { return cMappingExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	
	
	private final ModelElements pModel;
	private final AbstractRuleElements pAbstractRule;
	private final AbstractMappingRuleElements pAbstractMappingRule;
	private final ConfigurationElements pConfiguration;
	private final PolicyElements pPolicy;
	private final MappingElements pMapping;
	private final FeatureNameMappingRuleElements pFeatureNameMappingRule;
	private final AndMappingRuleElements pAndMappingRule;
	private final NotMappingRuleElements pNotMappingRule;
	private final OrMappingRuleElements pOrMappingRule;
	private final ImplicationMappingRuleElements pImplicationMappingRule;
	private final TrueMappingRuleElements pTrueMappingRule;
	private final RelationIsCyclicRuleElements pRelationIsCyclicRule;
	private final RelationTypesAreEqualRuleElements pRelationTypesAreEqualRule;
	private final RelationIsReflexivRuleElements pRelationIsReflexivRule;
	private final EStringElements pEString;
	private final AndRuleElements pAndRule;
	private final RelationNameRuleElements pRelationNameRule;
	private final OrRuleElements pOrRule;
	private final NotRuleElements pNotRule;
	private final ImplicationRuleElements pImplicationRule;
	private final SourceTypeRuleElements pSourceTypeRule;
	private final TargetTypeRuleElements pTargetTypeRule;
	private final CommandNameRuleElements pCommandNameRule;
	private final ShapeTypeRuleElements pShapeTypeRule;
	private final ParentTypeRuleElements pParentTypeRule;
	private final StepInRuleElements pStepInRule;
	private final TrueRuleElements pTrueRule;
	private final FalseRuleElements pFalseRule;
	private final ShapeNameRuleElements pShapeNameRule;
	private final MappingExpressionElements pMappingExpression;
	private final AndMappingElements pAndMapping;
	private final OrMappingElements pOrMapping;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAbstractRule = new AbstractRuleElements();
		this.pAbstractMappingRule = new AbstractMappingRuleElements();
		this.pConfiguration = new ConfigurationElements();
		this.pPolicy = new PolicyElements();
		this.pMapping = new MappingElements();
		this.pFeatureNameMappingRule = new FeatureNameMappingRuleElements();
		this.pAndMappingRule = new AndMappingRuleElements();
		this.pNotMappingRule = new NotMappingRuleElements();
		this.pOrMappingRule = new OrMappingRuleElements();
		this.pImplicationMappingRule = new ImplicationMappingRuleElements();
		this.pTrueMappingRule = new TrueMappingRuleElements();
		this.pRelationIsCyclicRule = new RelationIsCyclicRuleElements();
		this.pRelationTypesAreEqualRule = new RelationTypesAreEqualRuleElements();
		this.pRelationIsReflexivRule = new RelationIsReflexivRuleElements();
		this.pEString = new EStringElements();
		this.pAndRule = new AndRuleElements();
		this.pRelationNameRule = new RelationNameRuleElements();
		this.pOrRule = new OrRuleElements();
		this.pNotRule = new NotRuleElements();
		this.pImplicationRule = new ImplicationRuleElements();
		this.pSourceTypeRule = new SourceTypeRuleElements();
		this.pTargetTypeRule = new TargetTypeRuleElements();
		this.pCommandNameRule = new CommandNameRuleElements();
		this.pShapeTypeRule = new ShapeTypeRuleElements();
		this.pParentTypeRule = new ParentTypeRuleElements();
		this.pStepInRule = new StepInRuleElements();
		this.pTrueRule = new TrueRuleElements();
		this.pFalseRule = new FalseRuleElements();
		this.pShapeNameRule = new ShapeNameRuleElements();
		this.pMappingExpression = new MappingExpressionElements();
		this.pAndMapping = new AndMappingElements();
		this.pOrMapping = new OrMappingElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.framed.orm.editPolicy.model.dsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'Model'
	//	'{'
	//	'configuration' configuration=Configuration ('policies' '{' policies+=Policy ("," policies+=Policy)* '}')?
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//AbstractRule:
	//	AndRule | RelationNameRule | OrRule | NotRule | ImplicationRule | SourceTypeRule | TargetTypeRule | CommandNameRule |
	//	ShapeTypeRule | ParentTypeRule | StepInRule | TrueRule | FalseRule | ShapeNameRule | RelationIsCyclicRule |
	//	RelationIsReflexivRule | RelationTypesAreEqualRule;
	public AbstractRuleElements getAbstractRuleAccess() {
		return pAbstractRule;
	}
	
	public ParserRule getAbstractRuleRule() {
		return getAbstractRuleAccess().getRule();
	}
	
	//AbstractMappingRule:
	//	FeatureNameMappingRule | AndMappingRule | NotMappingRule | OrMappingRule | ImplicationMappingRule | TrueMappingRule;
	public AbstractMappingRuleElements getAbstractMappingRuleAccess() {
		return pAbstractMappingRule;
	}
	
	public ParserRule getAbstractMappingRuleRule() {
		return getAbstractMappingRuleAccess().getRule();
	}
	
	//Configuration:
	//	{Configuration}
	//	'Configuration'
	//	'{' ('mappings' '{' mappings+=Mapping ("," mappings+=Mapping)* '}')?
	//	'}';
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//Policy:
	//	'Policy'
	//	name=ID
	//	'{'
	//	rule=AbstractRule
	//	'}';
	public PolicyElements getPolicyAccess() {
		return pPolicy;
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}
	
	//Mapping:
	//	'Mapping'
	//	'{'
	//	'rule' rule=(AbstractMappingRule | MappingExpression)
	//	'policy' policy=[Policy]
	//	'}';
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//FeatureNameMappingRule:
	//	{FeatureNameMappingRule}
	//	'FeatureNameMappingRule'
	//	name=EString;
	public FeatureNameMappingRuleElements getFeatureNameMappingRuleAccess() {
		return pFeatureNameMappingRule;
	}
	
	public ParserRule getFeatureNameMappingRuleRule() {
		return getFeatureNameMappingRuleAccess().getRule();
	}
	
	//AndMappingRule:
	//	'AndMappingRule'
	//	'{'
	//	rules+=AbstractMappingRule ("," rules+=AbstractMappingRule)*
	//	'}';
	public AndMappingRuleElements getAndMappingRuleAccess() {
		return pAndMappingRule;
	}
	
	public ParserRule getAndMappingRuleRule() {
		return getAndMappingRuleAccess().getRule();
	}
	
	//NotMappingRule:
	//	'!' rule=AbstractMappingRule;
	public NotMappingRuleElements getNotMappingRuleAccess() {
		return pNotMappingRule;
	}
	
	public ParserRule getNotMappingRuleRule() {
		return getNotMappingRuleAccess().getRule();
	}
	
	//OrMappingRule:
	//	'OrMappingRule'
	//	'{'
	//	rules+=AbstractMappingRule ("," rules+=AbstractMappingRule)*
	//	'}';
	public OrMappingRuleElements getOrMappingRuleAccess() {
		return pOrMappingRule;
	}
	
	public ParserRule getOrMappingRuleRule() {
		return getOrMappingRuleAccess().getRule();
	}
	
	//ImplicationMappingRule:
	//	'ImplicationMappingRule'
	//	'{'
	//	'if' antecedent=AbstractMappingRule
	//	'then' consequent=AbstractMappingRule
	//	'}';
	public ImplicationMappingRuleElements getImplicationMappingRuleAccess() {
		return pImplicationMappingRule;
	}
	
	public ParserRule getImplicationMappingRuleRule() {
		return getImplicationMappingRuleAccess().getRule();
	}
	
	//TrueMappingRule:
	//	{TrueMappingRule}
	//	'TrueMappingRule';
	public TrueMappingRuleElements getTrueMappingRuleAccess() {
		return pTrueMappingRule;
	}
	
	public ParserRule getTrueMappingRuleRule() {
		return getTrueMappingRuleAccess().getRule();
	}
	
	//RelationIsCyclicRule:
	//	{RelationIsCyclicRule}
	//	'RelationIsCyclicRule';
	public RelationIsCyclicRuleElements getRelationIsCyclicRuleAccess() {
		return pRelationIsCyclicRule;
	}
	
	public ParserRule getRelationIsCyclicRuleRule() {
		return getRelationIsCyclicRuleAccess().getRule();
	}
	
	//RelationTypesAreEqualRule:
	//	{RelationTypesAreEqualRule}
	//	'RelationTypesAreEqualRule';
	public RelationTypesAreEqualRuleElements getRelationTypesAreEqualRuleAccess() {
		return pRelationTypesAreEqualRule;
	}
	
	public ParserRule getRelationTypesAreEqualRuleRule() {
		return getRelationTypesAreEqualRuleAccess().getRule();
	}
	
	//RelationIsReflexivRule:
	//	{RelationIsReflexivRule}
	//	'RelationIsReflexivRule';
	public RelationIsReflexivRuleElements getRelationIsReflexivRuleAccess() {
		return pRelationIsReflexivRule;
	}
	
	public ParserRule getRelationIsReflexivRuleRule() {
		return getRelationIsReflexivRuleAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//AndRule:
	//	'AndRule'
	//	'{'
	//	rules+=AbstractRule ("," rules+=AbstractRule)*
	//	'}';
	public AndRuleElements getAndRuleAccess() {
		return pAndRule;
	}
	
	public ParserRule getAndRuleRule() {
		return getAndRuleAccess().getRule();
	}
	
	//RelationNameRule:
	//	{RelationNameRule}
	//	'RelationNameRule'
	//	name=EString;
	public RelationNameRuleElements getRelationNameRuleAccess() {
		return pRelationNameRule;
	}
	
	public ParserRule getRelationNameRuleRule() {
		return getRelationNameRuleAccess().getRule();
	}
	
	//OrRule:
	//	'OrRule'
	//	'{'
	//	rules+=AbstractRule ("," rules+=AbstractRule)*
	//	'}';
	public OrRuleElements getOrRuleAccess() {
		return pOrRule;
	}
	
	public ParserRule getOrRuleRule() {
		return getOrRuleAccess().getRule();
	}
	
	//NotRule:
	//	'NotRule'
	//	'{'
	//	rule=AbstractRule
	//	'}';
	public NotRuleElements getNotRuleAccess() {
		return pNotRule;
	}
	
	public ParserRule getNotRuleRule() {
		return getNotRuleAccess().getRule();
	}
	
	//ImplicationRule:
	//	'ImplicationRule'
	//	'{'
	//	'if' antecedent=AbstractRule
	//	'then' consequent=AbstractRule
	//	'}';
	public ImplicationRuleElements getImplicationRuleAccess() {
		return pImplicationRule;
	}
	
	public ParserRule getImplicationRuleRule() {
		return getImplicationRuleAccess().getRule();
	}
	
	//SourceTypeRule:
	//	{SourceTypeRule}
	//	'SourceTypeRule'
	//	name=EString;
	public SourceTypeRuleElements getSourceTypeRuleAccess() {
		return pSourceTypeRule;
	}
	
	public ParserRule getSourceTypeRuleRule() {
		return getSourceTypeRuleAccess().getRule();
	}
	
	//TargetTypeRule:
	//	{TargetTypeRule}
	//	'TargetTypeRule'
	//	name=EString;
	public TargetTypeRuleElements getTargetTypeRuleAccess() {
		return pTargetTypeRule;
	}
	
	public ParserRule getTargetTypeRuleRule() {
		return getTargetTypeRuleAccess().getRule();
	}
	
	//CommandNameRule:
	//	{CommandNameRule}
	//	'CommandNameRule'
	//	name=EString;
	public CommandNameRuleElements getCommandNameRuleAccess() {
		return pCommandNameRule;
	}
	
	public ParserRule getCommandNameRuleRule() {
		return getCommandNameRuleAccess().getRule();
	}
	
	//ShapeTypeRule:
	//	{ShapeTypeRule}
	//	'ShapeTypeRule'
	//	name=EString;
	public ShapeTypeRuleElements getShapeTypeRuleAccess() {
		return pShapeTypeRule;
	}
	
	public ParserRule getShapeTypeRuleRule() {
		return getShapeTypeRuleAccess().getRule();
	}
	
	//ParentTypeRule:
	//	{ParentTypeRule}
	//	'ParentTypeRule'
	//	name=EString;
	public ParentTypeRuleElements getParentTypeRuleAccess() {
		return pParentTypeRule;
	}
	
	public ParserRule getParentTypeRuleRule() {
		return getParentTypeRuleAccess().getRule();
	}
	
	//StepInRule:
	//	{StepInRule}
	//	'StepInRule';
	public StepInRuleElements getStepInRuleAccess() {
		return pStepInRule;
	}
	
	public ParserRule getStepInRuleRule() {
		return getStepInRuleAccess().getRule();
	}
	
	//TrueRule:
	//	{TrueRule}
	//	'TrueRule';
	public TrueRuleElements getTrueRuleAccess() {
		return pTrueRule;
	}
	
	public ParserRule getTrueRuleRule() {
		return getTrueRuleAccess().getRule();
	}
	
	//FalseRule:
	//	{FalseRule}
	//	'FalseRule';
	public FalseRuleElements getFalseRuleAccess() {
		return pFalseRule;
	}
	
	public ParserRule getFalseRuleRule() {
		return getFalseRuleAccess().getRule();
	}
	
	//ShapeNameRule:
	//	{ShapeNameRule}
	//	'ShapeNameRule'
	//	name=EString;
	public ShapeNameRuleElements getShapeNameRuleAccess() {
		return pShapeNameRule;
	}
	
	public ParserRule getShapeNameRuleRule() {
		return getShapeNameRuleAccess().getRule();
	}
	
	////TODO, FIXME
	//MappingExpression AbstractMappingRule:
	//	AndMapping | '!' {NotMappingRule} rule=AndMapping
	public MappingExpressionElements getMappingExpressionAccess() {
		return pMappingExpression;
	}
	
	public ParserRule getMappingExpressionRule() {
		return getMappingExpressionAccess().getRule();
	}
	
	//AndMapping AbstractMappingRule:
	//	OrMapping ({AndMappingRule.rules+=current} '&&' rules+=OrMapping)*
	public AndMappingElements getAndMappingAccess() {
		return pAndMapping;
	}
	
	public ParserRule getAndMappingRule() {
		return getAndMappingAccess().getRule();
	}
	
	//OrMapping AbstractMappingRule:
	//	Primary ({OrMappingRule.rules+=current} '||' rules+=Primary)*
	public OrMappingElements getOrMappingAccess() {
		return pOrMapping;
	}
	
	public ParserRule getOrMappingRule() {
		return getOrMappingAccess().getRule();
	}
	
	//Primary AbstractMappingRule:
	//	TrueMappingRule | FeatureNameMappingRule |
	//	'(' MappingExpression ')'
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
