/*
 * generated by Xtext 2.10.0
 */
package org.framed.orm.editPolicy.model.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConfigurationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConfigurationConfigurationParserRuleCall_0_0 = (RuleCall)cConfigurationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPoliciesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPoliciesPolicyParserRuleCall_1_0_0 = (RuleCall)cPoliciesAssignment_1_0.eContents().get(0);
		private final Assignment cPoliciesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPoliciesPolicyParserRuleCall_1_1_0 = (RuleCall)cPoliciesAssignment_1_1.eContents().get(0);
		
		//Model:
		//	configuration=Configuration (policies+=Policy policies+=Policy*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//configuration=Configuration (policies+=Policy policies+=Policy*)?
		public Group getGroup() { return cGroup; }
		
		//configuration=Configuration
		public Assignment getConfigurationAssignment_0() { return cConfigurationAssignment_0; }
		
		//Configuration
		public RuleCall getConfigurationConfigurationParserRuleCall_0_0() { return cConfigurationConfigurationParserRuleCall_0_0; }
		
		//(policies+=Policy policies+=Policy*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//policies+=Policy
		public Assignment getPoliciesAssignment_1_0() { return cPoliciesAssignment_1_0; }
		
		//Policy
		public RuleCall getPoliciesPolicyParserRuleCall_1_0_0() { return cPoliciesPolicyParserRuleCall_1_0_0; }
		
		//policies+=Policy*
		public Assignment getPoliciesAssignment_1_1() { return cPoliciesAssignment_1_1; }
		
		//Policy
		public RuleCall getPoliciesPolicyParserRuleCall_1_1_0() { return cPoliciesPolicyParserRuleCall_1_1_0; }
	}
	public class PolicyRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.PolicyRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrueRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFalseRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommandNameRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cShapeTypeRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cParentTypeRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStepInRuleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSourceTypeRuleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTargetTypeRuleParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRelationIsCyclicRuleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRelationIsReflexivRuleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cRelationTypesAreEqualRuleParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTypeExistsRuleParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cShapeNameRuleParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cRelationTypeRuleParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		////add new policyrules here
		//PolicyRule AbstractRule:
		//	TrueRule | FalseRule | CommandNameRule | ShapeTypeRule | ParentTypeRule | StepInRule | SourceTypeRule | TargetTypeRule
		//	| RelationIsCyclicRule | RelationIsReflexivRule | RelationTypesAreEqualRule | TypeExistsRule | ShapeNameRule
		//	| RelationTypeRule
		@Override public ParserRule getRule() { return rule; }
		
		//TrueRule | FalseRule | CommandNameRule | ShapeTypeRule | ParentTypeRule | StepInRule | SourceTypeRule | TargetTypeRule |
		//RelationIsCyclicRule | RelationIsReflexivRule | RelationTypesAreEqualRule | TypeExistsRule | ShapeNameRule |
		//RelationTypeRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TrueRule
		public RuleCall getTrueRuleParserRuleCall_0() { return cTrueRuleParserRuleCall_0; }
		
		//FalseRule
		public RuleCall getFalseRuleParserRuleCall_1() { return cFalseRuleParserRuleCall_1; }
		
		//CommandNameRule
		public RuleCall getCommandNameRuleParserRuleCall_2() { return cCommandNameRuleParserRuleCall_2; }
		
		//ShapeTypeRule
		public RuleCall getShapeTypeRuleParserRuleCall_3() { return cShapeTypeRuleParserRuleCall_3; }
		
		//ParentTypeRule
		public RuleCall getParentTypeRuleParserRuleCall_4() { return cParentTypeRuleParserRuleCall_4; }
		
		//StepInRule
		public RuleCall getStepInRuleParserRuleCall_5() { return cStepInRuleParserRuleCall_5; }
		
		//SourceTypeRule
		public RuleCall getSourceTypeRuleParserRuleCall_6() { return cSourceTypeRuleParserRuleCall_6; }
		
		//TargetTypeRule
		public RuleCall getTargetTypeRuleParserRuleCall_7() { return cTargetTypeRuleParserRuleCall_7; }
		
		//RelationIsCyclicRule
		public RuleCall getRelationIsCyclicRuleParserRuleCall_8() { return cRelationIsCyclicRuleParserRuleCall_8; }
		
		//RelationIsReflexivRule
		public RuleCall getRelationIsReflexivRuleParserRuleCall_9() { return cRelationIsReflexivRuleParserRuleCall_9; }
		
		//RelationTypesAreEqualRule
		public RuleCall getRelationTypesAreEqualRuleParserRuleCall_10() { return cRelationTypesAreEqualRuleParserRuleCall_10; }
		
		//TypeExistsRule
		public RuleCall getTypeExistsRuleParserRuleCall_11() { return cTypeExistsRuleParserRuleCall_11; }
		
		//ShapeNameRule
		public RuleCall getShapeNameRuleParserRuleCall_12() { return cShapeNameRuleParserRuleCall_12; }
		
		//RelationTypeRule
		public RuleCall getRelationTypeRuleParserRuleCall_13() { return cRelationTypeRuleParserRuleCall_13; }
	}
	public class AbstractRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.AbstractRule");
		private final RuleCall cPolicyRuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractRule:
		//	PolicyRule;
		@Override public ParserRule getRule() { return rule; }
		
		//PolicyRule
		public RuleCall getPolicyRuleParserRuleCall() { return cPolicyRuleParserRuleCall; }
	}
	public class MappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.MappingRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureNameMappingRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrueMappingRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////add new mapping rules here
		//MappingRule AbstractMappingRule:
		//	FeatureNameMappingRule | TrueMappingRule
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureNameMappingRule | TrueMappingRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureNameMappingRule
		public RuleCall getFeatureNameMappingRuleParserRuleCall_0() { return cFeatureNameMappingRuleParserRuleCall_0; }
		
		//TrueMappingRule
		public RuleCall getTrueMappingRuleParserRuleCall_1() { return cTrueMappingRuleParserRuleCall_1; }
	}
	public class AbstractMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.AbstractMappingRule");
		private final RuleCall cMappingRuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractMappingRule:
		//	MappingRule;
		@Override public ParserRule getRule() { return rule; }
		
		//MappingRule
		public RuleCall getMappingRuleParserRuleCall() { return cMappingRuleParserRuleCall; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMappingsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMappingsMappingParserRuleCall_1_0_0 = (RuleCall)cMappingsAssignment_1_0.eContents().get(0);
		private final Assignment cMappingsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMappingsMappingParserRuleCall_1_1_0 = (RuleCall)cMappingsAssignment_1_1.eContents().get(0);
		
		//Configuration:
		//	{Configuration} (mappings+=Mapping mappings+=Mapping*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Configuration} (mappings+=Mapping mappings+=Mapping*)?
		public Group getGroup() { return cGroup; }
		
		//{Configuration}
		public Action getConfigurationAction_0() { return cConfigurationAction_0; }
		
		//(mappings+=Mapping mappings+=Mapping*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//mappings+=Mapping
		public Assignment getMappingsAssignment_1_0() { return cMappingsAssignment_1_0; }
		
		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_1_0_0() { return cMappingsMappingParserRuleCall_1_0_0; }
		
		//mappings+=Mapping*
		public Assignment getMappingsAssignment_1_1() { return cMappingsAssignment_1_1; }
		
		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_1_1_0() { return cMappingsMappingParserRuleCall_1_1_0; }
	}
	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulePolicyExpressionParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		
		//Policy:
		//	name=ID ':' rule=PolicyExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' rule=PolicyExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//rule=PolicyExpression
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//PolicyExpression
		public RuleCall getRulePolicyExpressionParserRuleCall_2_0() { return cRulePolicyExpressionParserRuleCall_2_0; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRuleMappingExpressionParserRuleCall_0_0 = (RuleCall)cRuleAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPolicyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPolicyPolicyCrossReference_2_0 = (CrossReference)cPolicyAssignment_2.eContents().get(0);
		private final RuleCall cPolicyPolicyIDTerminalRuleCall_2_0_1 = (RuleCall)cPolicyPolicyCrossReference_2_0.eContents().get(1);
		
		//Mapping:
		//	rule=MappingExpression ":" policy=[Policy];
		@Override public ParserRule getRule() { return rule; }
		
		//rule=MappingExpression ":" policy=[Policy]
		public Group getGroup() { return cGroup; }
		
		//rule=MappingExpression
		public Assignment getRuleAssignment_0() { return cRuleAssignment_0; }
		
		//MappingExpression
		public RuleCall getRuleMappingExpressionParserRuleCall_0_0() { return cRuleMappingExpressionParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//policy=[Policy]
		public Assignment getPolicyAssignment_2() { return cPolicyAssignment_2; }
		
		//[Policy]
		public CrossReference getPolicyPolicyCrossReference_2_0() { return cPolicyPolicyCrossReference_2_0; }
		
		//ID
		public RuleCall getPolicyPolicyIDTerminalRuleCall_2_0_1() { return cPolicyPolicyIDTerminalRuleCall_2_0_1; }
	}
	public class FeatureNameMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.FeatureNameMappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureNameMappingRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FeatureNameMappingRule:
		//	{FeatureNameMappingRule} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{FeatureNameMappingRule} name=EString
		public Group getGroup() { return cGroup; }
		
		//{FeatureNameMappingRule}
		public Action getFeatureNameMappingRuleAction_0() { return cFeatureNameMappingRuleAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class TrueMappingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.TrueMappingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrueMappingRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TrueMappingRule:
		//	{TrueMappingRule} 'true';
		@Override public ParserRule getRule() { return rule; }
		
		//{TrueMappingRule} 'true'
		public Group getGroup() { return cGroup; }
		
		//{TrueMappingRule}
		public Action getTrueMappingRuleAction_0() { return cTrueMappingRuleAction_0; }
		
		//'true'
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
	}
	public class RelationIsCyclicRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.RelationIsCyclicRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationIsCyclicRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationIsCyclicKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RelationIsCyclicRule:
		//	{RelationIsCyclicRule}
		//	'RelationIsCyclic';
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationIsCyclicRule} 'RelationIsCyclic'
		public Group getGroup() { return cGroup; }
		
		//{RelationIsCyclicRule}
		public Action getRelationIsCyclicRuleAction_0() { return cRelationIsCyclicRuleAction_0; }
		
		//'RelationIsCyclic'
		public Keyword getRelationIsCyclicKeyword_1() { return cRelationIsCyclicKeyword_1; }
	}
	public class RelationTypesAreEqualRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.RelationTypesAreEqualRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationTypesAreEqualRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationTypesAreEqualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RelationTypesAreEqualRule:
		//	{RelationTypesAreEqualRule}
		//	'RelationTypesAreEqual';
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationTypesAreEqualRule} 'RelationTypesAreEqual'
		public Group getGroup() { return cGroup; }
		
		//{RelationTypesAreEqualRule}
		public Action getRelationTypesAreEqualRuleAction_0() { return cRelationTypesAreEqualRuleAction_0; }
		
		//'RelationTypesAreEqual'
		public Keyword getRelationTypesAreEqualKeyword_1() { return cRelationTypesAreEqualKeyword_1; }
	}
	public class RelationIsReflexivRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.RelationIsReflexivRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationIsReflexivRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationIsReflexivKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RelationIsReflexivRule:
		//	{RelationIsReflexivRule}
		//	'RelationIsReflexiv';
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationIsReflexivRule} 'RelationIsReflexiv'
		public Group getGroup() { return cGroup; }
		
		//{RelationIsReflexivRule}
		public Action getRelationIsReflexivRuleAction_0() { return cRelationIsReflexivRuleAction_0; }
		
		//'RelationIsReflexiv'
		public Keyword getRelationIsReflexivKeyword_1() { return cRelationIsReflexivKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class RelationTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.RelationTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//RelationTypeRule:
		//	{RelationTypeRule}
		//	'RelationType'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationTypeRule} 'RelationType' name=EString
		public Group getGroup() { return cGroup; }
		
		//{RelationTypeRule}
		public Action getRelationTypeRuleAction_0() { return cRelationTypeRuleAction_0; }
		
		//'RelationType'
		public Keyword getRelationTypeKeyword_1() { return cRelationTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class TypeExistsRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.TypeExistsRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeExistsRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeExistsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TypeExistsRule:
		//	{TypeExistsRule}
		//	'TypeExists'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeExistsRule} 'TypeExists' name=EString
		public Group getGroup() { return cGroup; }
		
		//{TypeExistsRule}
		public Action getTypeExistsRuleAction_0() { return cTypeExistsRuleAction_0; }
		
		//'TypeExists'
		public Keyword getTypeExistsKeyword_1() { return cTypeExistsKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class SourceTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.SourceTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSourceTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//SourceTypeRule:
		//	{SourceTypeRule}
		//	'SourceType'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{SourceTypeRule} 'SourceType' name=EString
		public Group getGroup() { return cGroup; }
		
		//{SourceTypeRule}
		public Action getSourceTypeRuleAction_0() { return cSourceTypeRuleAction_0; }
		
		//'SourceType'
		public Keyword getSourceTypeKeyword_1() { return cSourceTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class TargetTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.TargetTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTargetTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TargetTypeRule:
		//	{TargetTypeRule}
		//	'TargetType'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{TargetTypeRule} 'TargetType' name=EString
		public Group getGroup() { return cGroup; }
		
		//{TargetTypeRule}
		public Action getTargetTypeRuleAction_0() { return cTargetTypeRuleAction_0; }
		
		//'TargetType'
		public Keyword getTargetTypeKeyword_1() { return cTargetTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class CommandNameRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.CommandNameRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandNameRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommandNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//CommandNameRule:
		//	{CommandNameRule}
		//	'CommandName' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{CommandNameRule} 'CommandName' name=EString
		public Group getGroup() { return cGroup; }
		
		//{CommandNameRule}
		public Action getCommandNameRuleAction_0() { return cCommandNameRuleAction_0; }
		
		//'CommandName'
		public Keyword getCommandNameKeyword_1() { return cCommandNameKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class ShapeTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ShapeTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShapeTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ShapeTypeRule:
		//	{ShapeTypeRule}
		//	'ShapeType' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeTypeRule} 'ShapeType' name=EString
		public Group getGroup() { return cGroup; }
		
		//{ShapeTypeRule}
		public Action getShapeTypeRuleAction_0() { return cShapeTypeRuleAction_0; }
		
		//'ShapeType'
		public Keyword getShapeTypeKeyword_1() { return cShapeTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class ParentTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ParentTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParentTypeRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParentTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ParentTypeRule:
		//	{ParentTypeRule}
		//	'ParentType' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParentTypeRule} 'ParentType' name=EString
		public Group getGroup() { return cGroup; }
		
		//{ParentTypeRule}
		public Action getParentTypeRuleAction_0() { return cParentTypeRuleAction_0; }
		
		//'ParentType'
		public Keyword getParentTypeKeyword_1() { return cParentTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class StepInRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.StepInRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStepInRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStepInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StepInRule:
		//	{StepInRule}
		//	'StepIn';
		@Override public ParserRule getRule() { return rule; }
		
		//{StepInRule} 'StepIn'
		public Group getGroup() { return cGroup; }
		
		//{StepInRule}
		public Action getStepInRuleAction_0() { return cStepInRuleAction_0; }
		
		//'StepIn'
		public Keyword getStepInKeyword_1() { return cStepInKeyword_1; }
	}
	public class TrueRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.TrueRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrueRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TrueRule:
		//	{TrueRule}
		//	'true';
		@Override public ParserRule getRule() { return rule; }
		
		//{TrueRule} 'true'
		public Group getGroup() { return cGroup; }
		
		//{TrueRule}
		public Action getTrueRuleAction_0() { return cTrueRuleAction_0; }
		
		//'true'
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
	}
	public class FalseRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.FalseRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFalseRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FalseRule:
		//	{FalseRule}
		//	'false';
		@Override public ParserRule getRule() { return rule; }
		
		//{FalseRule} 'false'
		public Group getGroup() { return cGroup; }
		
		//{FalseRule}
		public Action getFalseRuleAction_0() { return cFalseRuleAction_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class ShapeNameRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ShapeNameRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeNameRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShapeNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ShapeNameRule:
		//	{ShapeNameRule}
		//	'ShapeName'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeNameRule} 'ShapeName' name=EString
		public Group getGroup() { return cGroup; }
		
		//{ShapeNameRule}
		public Action getShapeNameRuleAction_0() { return cShapeNameRuleAction_0; }
		
		//'ShapeName'
		public Keyword getShapeNameKeyword_1() { return cShapeNameKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class MappingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.MappingExpression");
		private final RuleCall cImplicationMappingParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////expression support for Mappings
		//MappingExpression AbstractMappingRule:
		//	ImplicationMapping
		@Override public ParserRule getRule() { return rule; }
		
		//ImplicationMapping
		public RuleCall getImplicationMappingParserRuleCall() { return cImplicationMappingParserRuleCall; }
	}
	public class ImplicationMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ImplicationMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrMappingParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplicationMappingRuleAntecedentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConsequentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConsequentOrMappingParserRuleCall_1_2_0 = (RuleCall)cConsequentAssignment_1_2.eContents().get(0);
		
		//ImplicationMapping AbstractMappingRule:
		//	OrMapping ({ImplicationMappingRule.antecedent=current} '=>' consequent=OrMapping)?
		@Override public ParserRule getRule() { return rule; }
		
		//OrMapping ({ImplicationMappingRule.antecedent=current} '=>' consequent=OrMapping)?
		public Group getGroup() { return cGroup; }
		
		//OrMapping
		public RuleCall getOrMappingParserRuleCall_0() { return cOrMappingParserRuleCall_0; }
		
		//({ImplicationMappingRule.antecedent=current} '=>' consequent=OrMapping)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImplicationMappingRule.antecedent=current}
		public Action getImplicationMappingRuleAntecedentAction_1_0() { return cImplicationMappingRuleAntecedentAction_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//consequent=OrMapping
		public Assignment getConsequentAssignment_1_2() { return cConsequentAssignment_1_2; }
		
		//OrMapping
		public RuleCall getConsequentOrMappingParserRuleCall_1_2_0() { return cConsequentOrMappingParserRuleCall_1_2_0; }
	}
	public class OrMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.OrMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndMappingParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrMappingRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesAndMappingParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//OrMapping AbstractMappingRule:
		//	AndMapping ({OrMappingRule.rules+=current} '||' rules+=AndMapping)*
		@Override public ParserRule getRule() { return rule; }
		
		//AndMapping ({OrMappingRule.rules+=current} '||' rules+=AndMapping)*
		public Group getGroup() { return cGroup; }
		
		//AndMapping
		public RuleCall getAndMappingParserRuleCall_0() { return cAndMappingParserRuleCall_0; }
		
		//({OrMappingRule.rules+=current} '||' rules+=AndMapping)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrMappingRule.rules+=current}
		public Action getOrMappingRuleRulesAction_1_0() { return cOrMappingRuleRulesAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//rules+=AndMapping
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//AndMapping
		public RuleCall getRulesAndMappingParserRuleCall_1_2_0() { return cRulesAndMappingParserRuleCall_1_2_0; }
	}
	public class AndMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.AndMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotMappingExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndMappingRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesNotMappingExpressionParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//AndMapping AbstractMappingRule:
		//	NotMappingExpression ({AndMappingRule.rules+=current} '&&' rules+=NotMappingExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//NotMappingExpression ({AndMappingRule.rules+=current} '&&' rules+=NotMappingExpression)*
		public Group getGroup() { return cGroup; }
		
		//NotMappingExpression
		public RuleCall getNotMappingExpressionParserRuleCall_0() { return cNotMappingExpressionParserRuleCall_0; }
		
		//({AndMappingRule.rules+=current} '&&' rules+=NotMappingExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndMappingRule.rules+=current}
		public Action getAndMappingRuleRulesAction_1_0() { return cAndMappingRuleRulesAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//rules+=NotMappingExpression
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//NotMappingExpression
		public RuleCall getRulesNotMappingExpressionParserRuleCall_1_2_0() { return cRulesNotMappingExpressionParserRuleCall_1_2_0; }
	}
	public class NotMappingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.NotMappingExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cNotMappingRuleAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulePrimaryMappingParserRuleCall_1_2_0 = (RuleCall)cRuleAssignment_1_2.eContents().get(0);
		
		//NotMappingExpression AbstractMappingRule:
		//	PrimaryMapping | '!' {NotMappingRule} rule=PrimaryMapping
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryMapping | '!' {NotMappingRule} rule=PrimaryMapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryMapping
		public RuleCall getPrimaryMappingParserRuleCall_0() { return cPrimaryMappingParserRuleCall_0; }
		
		//'!' {NotMappingRule} rule=PrimaryMapping
		public Group getGroup_1() { return cGroup_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//{NotMappingRule}
		public Action getNotMappingRuleAction_1_1() { return cNotMappingRuleAction_1_1; }
		
		//rule=PrimaryMapping
		public Assignment getRuleAssignment_1_2() { return cRuleAssignment_1_2; }
		
		//PrimaryMapping
		public RuleCall getRulePrimaryMappingParserRuleCall_1_2_0() { return cRulePrimaryMappingParserRuleCall_1_2_0; }
	}
	public class PrimaryMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.PrimaryMapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMappingRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cMappingExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryMapping AbstractMappingRule:
		//	MappingRule | '(' MappingExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//MappingRule | '(' MappingExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MappingRule
		public RuleCall getMappingRuleParserRuleCall_0() { return cMappingRuleParserRuleCall_0; }
		
		//'(' MappingExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//MappingExpression
		public RuleCall getMappingExpressionParserRuleCall_1_1() { return cMappingExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class PolicyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.PolicyExpression");
		private final RuleCall cImplicationPolicyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////expression support for policies
		//PolicyExpression AbstractRule:
		//	ImplicationPolicy
		@Override public ParserRule getRule() { return rule; }
		
		//ImplicationPolicy
		public RuleCall getImplicationPolicyParserRuleCall() { return cImplicationPolicyParserRuleCall; }
	}
	public class ImplicationPolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.ImplicationPolicy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrPolicyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImplicationRuleAntecedentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConsequentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConsequentOrPolicyParserRuleCall_1_2_0 = (RuleCall)cConsequentAssignment_1_2.eContents().get(0);
		
		//ImplicationPolicy AbstractRule:
		//	OrPolicy ({ImplicationRule.antecedent=current} '=>' consequent=OrPolicy)?
		@Override public ParserRule getRule() { return rule; }
		
		//OrPolicy ({ImplicationRule.antecedent=current} '=>' consequent=OrPolicy)?
		public Group getGroup() { return cGroup; }
		
		//OrPolicy
		public RuleCall getOrPolicyParserRuleCall_0() { return cOrPolicyParserRuleCall_0; }
		
		//({ImplicationRule.antecedent=current} '=>' consequent=OrPolicy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImplicationRule.antecedent=current}
		public Action getImplicationRuleAntecedentAction_1_0() { return cImplicationRuleAntecedentAction_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//consequent=OrPolicy
		public Assignment getConsequentAssignment_1_2() { return cConsequentAssignment_1_2; }
		
		//OrPolicy
		public RuleCall getConsequentOrPolicyParserRuleCall_1_2_0() { return cConsequentOrPolicyParserRuleCall_1_2_0; }
	}
	public class OrPolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.OrPolicy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndPolicyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesAndPolicyParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//OrPolicy AbstractRule:
		//	AndPolicy ({OrRule.rules+=current} '||' rules+=AndPolicy)*
		@Override public ParserRule getRule() { return rule; }
		
		//AndPolicy ({OrRule.rules+=current} '||' rules+=AndPolicy)*
		public Group getGroup() { return cGroup; }
		
		//AndPolicy
		public RuleCall getAndPolicyParserRuleCall_0() { return cAndPolicyParserRuleCall_0; }
		
		//({OrRule.rules+=current} '||' rules+=AndPolicy)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrRule.rules+=current}
		public Action getOrRuleRulesAction_1_0() { return cOrRuleRulesAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//rules+=AndPolicy
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//AndPolicy
		public RuleCall getRulesAndPolicyParserRuleCall_1_2_0() { return cRulesAndPolicyParserRuleCall_1_2_0; }
	}
	public class AndPolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.AndPolicy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndRuleRulesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRulesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulesNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRulesAssignment_1_2.eContents().get(0);
		
		//AndPolicy AbstractRule:
		//	NotExpression ({AndRule.rules+=current} '&&' rules+=NotExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//NotExpression ({AndRule.rules+=current} '&&' rules+=NotExpression)*
		public Group getGroup() { return cGroup; }
		
		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }
		
		//({AndRule.rules+=current} '&&' rules+=NotExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndRule.rules+=current}
		public Action getAndRuleRulesAction_1_0() { return cAndRuleRulesAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//rules+=NotExpression
		public Assignment getRulesAssignment_1_2() { return cRulesAssignment_1_2; }
		
		//NotExpression
		public RuleCall getRulesNotExpressionParserRuleCall_1_2_0() { return cRulesNotExpressionParserRuleCall_1_2_0; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cNotRuleAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRulePrimaryParserRuleCall_1_2_0 = (RuleCall)cRuleAssignment_1_2.eContents().get(0);
		
		//NotExpression AbstractRule:
		//	Primary | '!' {NotRule} rule=Primary
		@Override public ParserRule getRule() { return rule; }
		
		//Primary | '!' {NotRule} rule=Primary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//'!' {NotRule} rule=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//{NotRule}
		public Action getNotRuleAction_1_1() { return cNotRuleAction_1_1; }
		
		//rule=Primary
		public Assignment getRuleAssignment_1_2() { return cRuleAssignment_1_2; }
		
		//Primary
		public RuleCall getRulePrimaryParserRuleCall_1_2_0() { return cRulePrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.framed.orm.editPolicy.model.dsl.Dsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPolicyRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPolicyExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary AbstractRule:
		//	PolicyRule | '(' PolicyExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//PolicyRule | '(' PolicyExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PolicyRule
		public RuleCall getPolicyRuleParserRuleCall_0() { return cPolicyRuleParserRuleCall_0; }
		
		//'(' PolicyExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//PolicyExpression
		public RuleCall getPolicyExpressionParserRuleCall_1_1() { return cPolicyExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final PolicyRuleElements pPolicyRule;
	private final AbstractRuleElements pAbstractRule;
	private final MappingRuleElements pMappingRule;
	private final AbstractMappingRuleElements pAbstractMappingRule;
	private final ConfigurationElements pConfiguration;
	private final PolicyElements pPolicy;
	private final MappingElements pMapping;
	private final FeatureNameMappingRuleElements pFeatureNameMappingRule;
	private final TrueMappingRuleElements pTrueMappingRule;
	private final RelationIsCyclicRuleElements pRelationIsCyclicRule;
	private final RelationTypesAreEqualRuleElements pRelationTypesAreEqualRule;
	private final RelationIsReflexivRuleElements pRelationIsReflexivRule;
	private final EStringElements pEString;
	private final RelationTypeRuleElements pRelationTypeRule;
	private final TypeExistsRuleElements pTypeExistsRule;
	private final SourceTypeRuleElements pSourceTypeRule;
	private final TargetTypeRuleElements pTargetTypeRule;
	private final CommandNameRuleElements pCommandNameRule;
	private final ShapeTypeRuleElements pShapeTypeRule;
	private final ParentTypeRuleElements pParentTypeRule;
	private final StepInRuleElements pStepInRule;
	private final TrueRuleElements pTrueRule;
	private final FalseRuleElements pFalseRule;
	private final ShapeNameRuleElements pShapeNameRule;
	private final MappingExpressionElements pMappingExpression;
	private final ImplicationMappingElements pImplicationMapping;
	private final OrMappingElements pOrMapping;
	private final AndMappingElements pAndMapping;
	private final NotMappingExpressionElements pNotMappingExpression;
	private final PrimaryMappingElements pPrimaryMapping;
	private final PolicyExpressionElements pPolicyExpression;
	private final ImplicationPolicyElements pImplicationPolicy;
	private final OrPolicyElements pOrPolicy;
	private final AndPolicyElements pAndPolicy;
	private final NotExpressionElements pNotExpression;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPolicyRule = new PolicyRuleElements();
		this.pAbstractRule = new AbstractRuleElements();
		this.pMappingRule = new MappingRuleElements();
		this.pAbstractMappingRule = new AbstractMappingRuleElements();
		this.pConfiguration = new ConfigurationElements();
		this.pPolicy = new PolicyElements();
		this.pMapping = new MappingElements();
		this.pFeatureNameMappingRule = new FeatureNameMappingRuleElements();
		this.pTrueMappingRule = new TrueMappingRuleElements();
		this.pRelationIsCyclicRule = new RelationIsCyclicRuleElements();
		this.pRelationTypesAreEqualRule = new RelationTypesAreEqualRuleElements();
		this.pRelationIsReflexivRule = new RelationIsReflexivRuleElements();
		this.pEString = new EStringElements();
		this.pRelationTypeRule = new RelationTypeRuleElements();
		this.pTypeExistsRule = new TypeExistsRuleElements();
		this.pSourceTypeRule = new SourceTypeRuleElements();
		this.pTargetTypeRule = new TargetTypeRuleElements();
		this.pCommandNameRule = new CommandNameRuleElements();
		this.pShapeTypeRule = new ShapeTypeRuleElements();
		this.pParentTypeRule = new ParentTypeRuleElements();
		this.pStepInRule = new StepInRuleElements();
		this.pTrueRule = new TrueRuleElements();
		this.pFalseRule = new FalseRuleElements();
		this.pShapeNameRule = new ShapeNameRuleElements();
		this.pMappingExpression = new MappingExpressionElements();
		this.pImplicationMapping = new ImplicationMappingElements();
		this.pOrMapping = new OrMappingElements();
		this.pAndMapping = new AndMappingElements();
		this.pNotMappingExpression = new NotMappingExpressionElements();
		this.pPrimaryMapping = new PrimaryMappingElements();
		this.pPolicyExpression = new PolicyExpressionElements();
		this.pImplicationPolicy = new ImplicationPolicyElements();
		this.pOrPolicy = new OrPolicyElements();
		this.pAndPolicy = new AndPolicyElements();
		this.pNotExpression = new NotExpressionElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.framed.orm.editPolicy.model.dsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	configuration=Configuration (policies+=Policy policies+=Policy*)?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////add new policyrules here
	//PolicyRule AbstractRule:
	//	TrueRule | FalseRule | CommandNameRule | ShapeTypeRule | ParentTypeRule | StepInRule | SourceTypeRule | TargetTypeRule
	//	| RelationIsCyclicRule | RelationIsReflexivRule | RelationTypesAreEqualRule | TypeExistsRule | ShapeNameRule
	//	| RelationTypeRule
	public PolicyRuleElements getPolicyRuleAccess() {
		return pPolicyRule;
	}
	
	public ParserRule getPolicyRuleRule() {
		return getPolicyRuleAccess().getRule();
	}
	
	//AbstractRule:
	//	PolicyRule;
	public AbstractRuleElements getAbstractRuleAccess() {
		return pAbstractRule;
	}
	
	public ParserRule getAbstractRuleRule() {
		return getAbstractRuleAccess().getRule();
	}
	
	////add new mapping rules here
	//MappingRule AbstractMappingRule:
	//	FeatureNameMappingRule | TrueMappingRule
	public MappingRuleElements getMappingRuleAccess() {
		return pMappingRule;
	}
	
	public ParserRule getMappingRuleRule() {
		return getMappingRuleAccess().getRule();
	}
	
	//AbstractMappingRule:
	//	MappingRule;
	public AbstractMappingRuleElements getAbstractMappingRuleAccess() {
		return pAbstractMappingRule;
	}
	
	public ParserRule getAbstractMappingRuleRule() {
		return getAbstractMappingRuleAccess().getRule();
	}
	
	//Configuration:
	//	{Configuration} (mappings+=Mapping mappings+=Mapping*)?;
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//Policy:
	//	name=ID ':' rule=PolicyExpression;
	public PolicyElements getPolicyAccess() {
		return pPolicy;
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}
	
	//Mapping:
	//	rule=MappingExpression ":" policy=[Policy];
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//FeatureNameMappingRule:
	//	{FeatureNameMappingRule} name=EString;
	public FeatureNameMappingRuleElements getFeatureNameMappingRuleAccess() {
		return pFeatureNameMappingRule;
	}
	
	public ParserRule getFeatureNameMappingRuleRule() {
		return getFeatureNameMappingRuleAccess().getRule();
	}
	
	//TrueMappingRule:
	//	{TrueMappingRule} 'true';
	public TrueMappingRuleElements getTrueMappingRuleAccess() {
		return pTrueMappingRule;
	}
	
	public ParserRule getTrueMappingRuleRule() {
		return getTrueMappingRuleAccess().getRule();
	}
	
	//RelationIsCyclicRule:
	//	{RelationIsCyclicRule}
	//	'RelationIsCyclic';
	public RelationIsCyclicRuleElements getRelationIsCyclicRuleAccess() {
		return pRelationIsCyclicRule;
	}
	
	public ParserRule getRelationIsCyclicRuleRule() {
		return getRelationIsCyclicRuleAccess().getRule();
	}
	
	//RelationTypesAreEqualRule:
	//	{RelationTypesAreEqualRule}
	//	'RelationTypesAreEqual';
	public RelationTypesAreEqualRuleElements getRelationTypesAreEqualRuleAccess() {
		return pRelationTypesAreEqualRule;
	}
	
	public ParserRule getRelationTypesAreEqualRuleRule() {
		return getRelationTypesAreEqualRuleAccess().getRule();
	}
	
	//RelationIsReflexivRule:
	//	{RelationIsReflexivRule}
	//	'RelationIsReflexiv';
	public RelationIsReflexivRuleElements getRelationIsReflexivRuleAccess() {
		return pRelationIsReflexivRule;
	}
	
	public ParserRule getRelationIsReflexivRuleRule() {
		return getRelationIsReflexivRuleAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//RelationTypeRule:
	//	{RelationTypeRule}
	//	'RelationType'
	//	name=EString;
	public RelationTypeRuleElements getRelationTypeRuleAccess() {
		return pRelationTypeRule;
	}
	
	public ParserRule getRelationTypeRuleRule() {
		return getRelationTypeRuleAccess().getRule();
	}
	
	//TypeExistsRule:
	//	{TypeExistsRule}
	//	'TypeExists'
	//	name=EString;
	public TypeExistsRuleElements getTypeExistsRuleAccess() {
		return pTypeExistsRule;
	}
	
	public ParserRule getTypeExistsRuleRule() {
		return getTypeExistsRuleAccess().getRule();
	}
	
	//SourceTypeRule:
	//	{SourceTypeRule}
	//	'SourceType'
	//	name=EString;
	public SourceTypeRuleElements getSourceTypeRuleAccess() {
		return pSourceTypeRule;
	}
	
	public ParserRule getSourceTypeRuleRule() {
		return getSourceTypeRuleAccess().getRule();
	}
	
	//TargetTypeRule:
	//	{TargetTypeRule}
	//	'TargetType'
	//	name=EString;
	public TargetTypeRuleElements getTargetTypeRuleAccess() {
		return pTargetTypeRule;
	}
	
	public ParserRule getTargetTypeRuleRule() {
		return getTargetTypeRuleAccess().getRule();
	}
	
	//CommandNameRule:
	//	{CommandNameRule}
	//	'CommandName' name=EString;
	public CommandNameRuleElements getCommandNameRuleAccess() {
		return pCommandNameRule;
	}
	
	public ParserRule getCommandNameRuleRule() {
		return getCommandNameRuleAccess().getRule();
	}
	
	//ShapeTypeRule:
	//	{ShapeTypeRule}
	//	'ShapeType' name=EString;
	public ShapeTypeRuleElements getShapeTypeRuleAccess() {
		return pShapeTypeRule;
	}
	
	public ParserRule getShapeTypeRuleRule() {
		return getShapeTypeRuleAccess().getRule();
	}
	
	//ParentTypeRule:
	//	{ParentTypeRule}
	//	'ParentType' name=EString;
	public ParentTypeRuleElements getParentTypeRuleAccess() {
		return pParentTypeRule;
	}
	
	public ParserRule getParentTypeRuleRule() {
		return getParentTypeRuleAccess().getRule();
	}
	
	//StepInRule:
	//	{StepInRule}
	//	'StepIn';
	public StepInRuleElements getStepInRuleAccess() {
		return pStepInRule;
	}
	
	public ParserRule getStepInRuleRule() {
		return getStepInRuleAccess().getRule();
	}
	
	//TrueRule:
	//	{TrueRule}
	//	'true';
	public TrueRuleElements getTrueRuleAccess() {
		return pTrueRule;
	}
	
	public ParserRule getTrueRuleRule() {
		return getTrueRuleAccess().getRule();
	}
	
	//FalseRule:
	//	{FalseRule}
	//	'false';
	public FalseRuleElements getFalseRuleAccess() {
		return pFalseRule;
	}
	
	public ParserRule getFalseRuleRule() {
		return getFalseRuleAccess().getRule();
	}
	
	//ShapeNameRule:
	//	{ShapeNameRule}
	//	'ShapeName'
	//	name=EString;
	public ShapeNameRuleElements getShapeNameRuleAccess() {
		return pShapeNameRule;
	}
	
	public ParserRule getShapeNameRuleRule() {
		return getShapeNameRuleAccess().getRule();
	}
	
	////expression support for Mappings
	//MappingExpression AbstractMappingRule:
	//	ImplicationMapping
	public MappingExpressionElements getMappingExpressionAccess() {
		return pMappingExpression;
	}
	
	public ParserRule getMappingExpressionRule() {
		return getMappingExpressionAccess().getRule();
	}
	
	//ImplicationMapping AbstractMappingRule:
	//	OrMapping ({ImplicationMappingRule.antecedent=current} '=>' consequent=OrMapping)?
	public ImplicationMappingElements getImplicationMappingAccess() {
		return pImplicationMapping;
	}
	
	public ParserRule getImplicationMappingRule() {
		return getImplicationMappingAccess().getRule();
	}
	
	//OrMapping AbstractMappingRule:
	//	AndMapping ({OrMappingRule.rules+=current} '||' rules+=AndMapping)*
	public OrMappingElements getOrMappingAccess() {
		return pOrMapping;
	}
	
	public ParserRule getOrMappingRule() {
		return getOrMappingAccess().getRule();
	}
	
	//AndMapping AbstractMappingRule:
	//	NotMappingExpression ({AndMappingRule.rules+=current} '&&' rules+=NotMappingExpression)*
	public AndMappingElements getAndMappingAccess() {
		return pAndMapping;
	}
	
	public ParserRule getAndMappingRule() {
		return getAndMappingAccess().getRule();
	}
	
	//NotMappingExpression AbstractMappingRule:
	//	PrimaryMapping | '!' {NotMappingRule} rule=PrimaryMapping
	public NotMappingExpressionElements getNotMappingExpressionAccess() {
		return pNotMappingExpression;
	}
	
	public ParserRule getNotMappingExpressionRule() {
		return getNotMappingExpressionAccess().getRule();
	}
	
	//PrimaryMapping AbstractMappingRule:
	//	MappingRule | '(' MappingExpression ')'
	public PrimaryMappingElements getPrimaryMappingAccess() {
		return pPrimaryMapping;
	}
	
	public ParserRule getPrimaryMappingRule() {
		return getPrimaryMappingAccess().getRule();
	}
	
	////expression support for policies
	//PolicyExpression AbstractRule:
	//	ImplicationPolicy
	public PolicyExpressionElements getPolicyExpressionAccess() {
		return pPolicyExpression;
	}
	
	public ParserRule getPolicyExpressionRule() {
		return getPolicyExpressionAccess().getRule();
	}
	
	//ImplicationPolicy AbstractRule:
	//	OrPolicy ({ImplicationRule.antecedent=current} '=>' consequent=OrPolicy)?
	public ImplicationPolicyElements getImplicationPolicyAccess() {
		return pImplicationPolicy;
	}
	
	public ParserRule getImplicationPolicyRule() {
		return getImplicationPolicyAccess().getRule();
	}
	
	//OrPolicy AbstractRule:
	//	AndPolicy ({OrRule.rules+=current} '||' rules+=AndPolicy)*
	public OrPolicyElements getOrPolicyAccess() {
		return pOrPolicy;
	}
	
	public ParserRule getOrPolicyRule() {
		return getOrPolicyAccess().getRule();
	}
	
	//AndPolicy AbstractRule:
	//	NotExpression ({AndRule.rules+=current} '&&' rules+=NotExpression)*
	public AndPolicyElements getAndPolicyAccess() {
		return pAndPolicy;
	}
	
	public ParserRule getAndPolicyRule() {
		return getAndPolicyAccess().getRule();
	}
	
	//NotExpression AbstractRule:
	//	Primary | '!' {NotRule} rule=Primary
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//Primary AbstractRule:
	//	PolicyRule | '(' PolicyExpression ')'
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
