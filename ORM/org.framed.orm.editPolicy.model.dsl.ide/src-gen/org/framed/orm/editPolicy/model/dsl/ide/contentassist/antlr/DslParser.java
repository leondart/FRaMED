/*
 * generated by Xtext 2.10.0
 */
package org.framed.orm.editPolicy.model.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.framed.orm.editPolicy.model.dsl.ide.contentassist.antlr.internal.InternalDslParser;
import org.framed.orm.editPolicy.model.dsl.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Inject
	private DslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPolicyRuleAccess().getAlternatives(), "rule__PolicyRule__Alternatives");
					put(grammarAccess.getMappingRuleAccess().getAlternatives(), "rule__MappingRule__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getNotMappingExpressionAccess().getAlternatives(), "rule__NotMappingExpression__Alternatives");
					put(grammarAccess.getPrimaryMappingAccess().getAlternatives(), "rule__PrimaryMapping__Alternatives");
					put(grammarAccess.getNotExpressionAccess().getAlternatives(), "rule__NotExpression__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_1(), "rule__Model__Group_1__0");
					put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
					put(grammarAccess.getConfigurationAccess().getGroup_1(), "rule__Configuration__Group_1__0");
					put(grammarAccess.getPolicyAccess().getGroup(), "rule__Policy__Group__0");
					put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
					put(grammarAccess.getFeatureNameMappingRuleAccess().getGroup(), "rule__FeatureNameMappingRule__Group__0");
					put(grammarAccess.getTrueMappingRuleAccess().getGroup(), "rule__TrueMappingRule__Group__0");
					put(grammarAccess.getRelationIsCyclicRuleAccess().getGroup(), "rule__RelationIsCyclicRule__Group__0");
					put(grammarAccess.getRelationTypesAreEqualRuleAccess().getGroup(), "rule__RelationTypesAreEqualRule__Group__0");
					put(grammarAccess.getRelationIsReflexivRuleAccess().getGroup(), "rule__RelationIsReflexivRule__Group__0");
					put(grammarAccess.getRelationTypeRuleAccess().getGroup(), "rule__RelationTypeRule__Group__0");
					put(grammarAccess.getTypeExistsRuleAccess().getGroup(), "rule__TypeExistsRule__Group__0");
					put(grammarAccess.getSourceTypeRuleAccess().getGroup(), "rule__SourceTypeRule__Group__0");
					put(grammarAccess.getTargetTypeRuleAccess().getGroup(), "rule__TargetTypeRule__Group__0");
					put(grammarAccess.getCommandNameRuleAccess().getGroup(), "rule__CommandNameRule__Group__0");
					put(grammarAccess.getShapeTypeRuleAccess().getGroup(), "rule__ShapeTypeRule__Group__0");
					put(grammarAccess.getParentTypeRuleAccess().getGroup(), "rule__ParentTypeRule__Group__0");
					put(grammarAccess.getStepInRuleAccess().getGroup(), "rule__StepInRule__Group__0");
					put(grammarAccess.getTrueRuleAccess().getGroup(), "rule__TrueRule__Group__0");
					put(grammarAccess.getFalseRuleAccess().getGroup(), "rule__FalseRule__Group__0");
					put(grammarAccess.getShapeNameRuleAccess().getGroup(), "rule__ShapeNameRule__Group__0");
					put(grammarAccess.getImplicationMappingAccess().getGroup(), "rule__ImplicationMapping__Group__0");
					put(grammarAccess.getImplicationMappingAccess().getGroup_1(), "rule__ImplicationMapping__Group_1__0");
					put(grammarAccess.getOrMappingAccess().getGroup(), "rule__OrMapping__Group__0");
					put(grammarAccess.getOrMappingAccess().getGroup_1(), "rule__OrMapping__Group_1__0");
					put(grammarAccess.getAndMappingAccess().getGroup(), "rule__AndMapping__Group__0");
					put(grammarAccess.getAndMappingAccess().getGroup_1(), "rule__AndMapping__Group_1__0");
					put(grammarAccess.getNotMappingExpressionAccess().getGroup_1(), "rule__NotMappingExpression__Group_1__0");
					put(grammarAccess.getPrimaryMappingAccess().getGroup_1(), "rule__PrimaryMapping__Group_1__0");
					put(grammarAccess.getImplicationPolicyAccess().getGroup(), "rule__ImplicationPolicy__Group__0");
					put(grammarAccess.getImplicationPolicyAccess().getGroup_1(), "rule__ImplicationPolicy__Group_1__0");
					put(grammarAccess.getOrPolicyAccess().getGroup(), "rule__OrPolicy__Group__0");
					put(grammarAccess.getOrPolicyAccess().getGroup_1(), "rule__OrPolicy__Group_1__0");
					put(grammarAccess.getAndPolicyAccess().getGroup(), "rule__AndPolicy__Group__0");
					put(grammarAccess.getAndPolicyAccess().getGroup_1(), "rule__AndPolicy__Group_1__0");
					put(grammarAccess.getNotExpressionAccess().getGroup_1(), "rule__NotExpression__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getModelAccess().getConfigurationAssignment_0(), "rule__Model__ConfigurationAssignment_0");
					put(grammarAccess.getModelAccess().getPoliciesAssignment_1_0(), "rule__Model__PoliciesAssignment_1_0");
					put(grammarAccess.getModelAccess().getPoliciesAssignment_1_1(), "rule__Model__PoliciesAssignment_1_1");
					put(grammarAccess.getConfigurationAccess().getMappingsAssignment_1_0(), "rule__Configuration__MappingsAssignment_1_0");
					put(grammarAccess.getConfigurationAccess().getMappingsAssignment_1_1(), "rule__Configuration__MappingsAssignment_1_1");
					put(grammarAccess.getPolicyAccess().getNameAssignment_0(), "rule__Policy__NameAssignment_0");
					put(grammarAccess.getPolicyAccess().getRuleAssignment_2(), "rule__Policy__RuleAssignment_2");
					put(grammarAccess.getMappingAccess().getRuleAssignment_0(), "rule__Mapping__RuleAssignment_0");
					put(grammarAccess.getMappingAccess().getPolicyAssignment_2(), "rule__Mapping__PolicyAssignment_2");
					put(grammarAccess.getFeatureNameMappingRuleAccess().getNameAssignment_1(), "rule__FeatureNameMappingRule__NameAssignment_1");
					put(grammarAccess.getRelationTypeRuleAccess().getNameAssignment_2(), "rule__RelationTypeRule__NameAssignment_2");
					put(grammarAccess.getTypeExistsRuleAccess().getNameAssignment_2(), "rule__TypeExistsRule__NameAssignment_2");
					put(grammarAccess.getSourceTypeRuleAccess().getNameAssignment_2(), "rule__SourceTypeRule__NameAssignment_2");
					put(grammarAccess.getTargetTypeRuleAccess().getNameAssignment_2(), "rule__TargetTypeRule__NameAssignment_2");
					put(grammarAccess.getCommandNameRuleAccess().getNameAssignment_2(), "rule__CommandNameRule__NameAssignment_2");
					put(grammarAccess.getShapeTypeRuleAccess().getNameAssignment_2(), "rule__ShapeTypeRule__NameAssignment_2");
					put(grammarAccess.getParentTypeRuleAccess().getNameAssignment_2(), "rule__ParentTypeRule__NameAssignment_2");
					put(grammarAccess.getShapeNameRuleAccess().getNameAssignment_2(), "rule__ShapeNameRule__NameAssignment_2");
					put(grammarAccess.getImplicationMappingAccess().getConsequentAssignment_1_2(), "rule__ImplicationMapping__ConsequentAssignment_1_2");
					put(grammarAccess.getOrMappingAccess().getRulesAssignment_1_2(), "rule__OrMapping__RulesAssignment_1_2");
					put(grammarAccess.getAndMappingAccess().getRulesAssignment_1_2(), "rule__AndMapping__RulesAssignment_1_2");
					put(grammarAccess.getNotMappingExpressionAccess().getRuleAssignment_1_2(), "rule__NotMappingExpression__RuleAssignment_1_2");
					put(grammarAccess.getImplicationPolicyAccess().getConsequentAssignment_1_2(), "rule__ImplicationPolicy__ConsequentAssignment_1_2");
					put(grammarAccess.getOrPolicyAccess().getRulesAssignment_1_2(), "rule__OrPolicy__RulesAssignment_1_2");
					put(grammarAccess.getAndPolicyAccess().getRulesAssignment_1_2(), "rule__AndPolicy__RulesAssignment_1_2");
					put(grammarAccess.getNotExpressionAccess().getRuleAssignment_1_2(), "rule__NotExpression__RuleAssignment_1_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDslParser typedParser = (InternalDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
