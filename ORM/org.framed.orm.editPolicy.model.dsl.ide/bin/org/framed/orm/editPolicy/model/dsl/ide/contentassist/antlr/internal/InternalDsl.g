/*
 * generated by Xtext 2.10.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.framed.orm.editPolicy.model.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.framed.orm.editPolicy.model.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.framed.orm.editPolicy.model.dsl.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolicyRule
entryRulePolicyRule
:
{ before(grammarAccess.getPolicyRuleRule()); }
	 rulePolicyRule
{ after(grammarAccess.getPolicyRuleRule()); } 
	 EOF 
;

// Rule PolicyRule
rulePolicyRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolicyRuleAccess().getAlternatives()); }
		(rule__PolicyRule__Alternatives)
		{ after(grammarAccess.getPolicyRuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMappingRule
entryRuleMappingRule
:
{ before(grammarAccess.getMappingRuleRule()); }
	 ruleMappingRule
{ after(grammarAccess.getMappingRuleRule()); } 
	 EOF 
;

// Rule MappingRule
ruleMappingRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingRuleAccess().getAlternatives()); }
		(rule__MappingRule__Alternatives)
		{ after(grammarAccess.getMappingRuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConfiguration
entryRuleConfiguration
:
{ before(grammarAccess.getConfigurationRule()); }
	 ruleConfiguration
{ after(grammarAccess.getConfigurationRule()); } 
	 EOF 
;

// Rule Configuration
ruleConfiguration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConfigurationAccess().getGroup()); }
		(rule__Configuration__Group__0)
		{ after(grammarAccess.getConfigurationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolicy
entryRulePolicy
:
{ before(grammarAccess.getPolicyRule()); }
	 rulePolicy
{ after(grammarAccess.getPolicyRule()); } 
	 EOF 
;

// Rule Policy
rulePolicy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolicyAccess().getGroup()); }
		(rule__Policy__Group__0)
		{ after(grammarAccess.getPolicyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapping
entryRuleMapping
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingAccess().getGroup()); }
		(rule__Mapping__Group__0)
		{ after(grammarAccess.getMappingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureNameMappingRule
entryRuleFeatureNameMappingRule
:
{ before(grammarAccess.getFeatureNameMappingRuleRule()); }
	 ruleFeatureNameMappingRule
{ after(grammarAccess.getFeatureNameMappingRuleRule()); } 
	 EOF 
;

// Rule FeatureNameMappingRule
ruleFeatureNameMappingRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureNameMappingRuleAccess().getGroup()); }
		(rule__FeatureNameMappingRule__Group__0)
		{ after(grammarAccess.getFeatureNameMappingRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrueMappingRule
entryRuleTrueMappingRule
:
{ before(grammarAccess.getTrueMappingRuleRule()); }
	 ruleTrueMappingRule
{ after(grammarAccess.getTrueMappingRuleRule()); } 
	 EOF 
;

// Rule TrueMappingRule
ruleTrueMappingRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrueMappingRuleAccess().getGroup()); }
		(rule__TrueMappingRule__Group__0)
		{ after(grammarAccess.getTrueMappingRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationIsCyclicRule
entryRuleRelationIsCyclicRule
:
{ before(grammarAccess.getRelationIsCyclicRuleRule()); }
	 ruleRelationIsCyclicRule
{ after(grammarAccess.getRelationIsCyclicRuleRule()); } 
	 EOF 
;

// Rule RelationIsCyclicRule
ruleRelationIsCyclicRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationIsCyclicRuleAccess().getGroup()); }
		(rule__RelationIsCyclicRule__Group__0)
		{ after(grammarAccess.getRelationIsCyclicRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationTypesAreEqualRule
entryRuleRelationTypesAreEqualRule
:
{ before(grammarAccess.getRelationTypesAreEqualRuleRule()); }
	 ruleRelationTypesAreEqualRule
{ after(grammarAccess.getRelationTypesAreEqualRuleRule()); } 
	 EOF 
;

// Rule RelationTypesAreEqualRule
ruleRelationTypesAreEqualRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationTypesAreEqualRuleAccess().getGroup()); }
		(rule__RelationTypesAreEqualRule__Group__0)
		{ after(grammarAccess.getRelationTypesAreEqualRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationIsReflexivRule
entryRuleRelationIsReflexivRule
:
{ before(grammarAccess.getRelationIsReflexivRuleRule()); }
	 ruleRelationIsReflexivRule
{ after(grammarAccess.getRelationIsReflexivRuleRule()); } 
	 EOF 
;

// Rule RelationIsReflexivRule
ruleRelationIsReflexivRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationIsReflexivRuleAccess().getGroup()); }
		(rule__RelationIsReflexivRule__Group__0)
		{ after(grammarAccess.getRelationIsReflexivRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationNameRule
entryRuleRelationNameRule
:
{ before(grammarAccess.getRelationNameRuleRule()); }
	 ruleRelationNameRule
{ after(grammarAccess.getRelationNameRuleRule()); } 
	 EOF 
;

// Rule RelationNameRule
ruleRelationNameRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationNameRuleAccess().getGroup()); }
		(rule__RelationNameRule__Group__0)
		{ after(grammarAccess.getRelationNameRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeExistsRule
entryRuleTypeExistsRule
:
{ before(grammarAccess.getTypeExistsRuleRule()); }
	 ruleTypeExistsRule
{ after(grammarAccess.getTypeExistsRuleRule()); } 
	 EOF 
;

// Rule TypeExistsRule
ruleTypeExistsRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeExistsRuleAccess().getGroup()); }
		(rule__TypeExistsRule__Group__0)
		{ after(grammarAccess.getTypeExistsRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSourceTypeRule
entryRuleSourceTypeRule
:
{ before(grammarAccess.getSourceTypeRuleRule()); }
	 ruleSourceTypeRule
{ after(grammarAccess.getSourceTypeRuleRule()); } 
	 EOF 
;

// Rule SourceTypeRule
ruleSourceTypeRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSourceTypeRuleAccess().getGroup()); }
		(rule__SourceTypeRule__Group__0)
		{ after(grammarAccess.getSourceTypeRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTargetTypeRule
entryRuleTargetTypeRule
:
{ before(grammarAccess.getTargetTypeRuleRule()); }
	 ruleTargetTypeRule
{ after(grammarAccess.getTargetTypeRuleRule()); } 
	 EOF 
;

// Rule TargetTypeRule
ruleTargetTypeRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetTypeRuleAccess().getGroup()); }
		(rule__TargetTypeRule__Group__0)
		{ after(grammarAccess.getTargetTypeRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandNameRule
entryRuleCommandNameRule
:
{ before(grammarAccess.getCommandNameRuleRule()); }
	 ruleCommandNameRule
{ after(grammarAccess.getCommandNameRuleRule()); } 
	 EOF 
;

// Rule CommandNameRule
ruleCommandNameRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandNameRuleAccess().getGroup()); }
		(rule__CommandNameRule__Group__0)
		{ after(grammarAccess.getCommandNameRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeTypeRule
entryRuleShapeTypeRule
:
{ before(grammarAccess.getShapeTypeRuleRule()); }
	 ruleShapeTypeRule
{ after(grammarAccess.getShapeTypeRuleRule()); } 
	 EOF 
;

// Rule ShapeTypeRule
ruleShapeTypeRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeTypeRuleAccess().getGroup()); }
		(rule__ShapeTypeRule__Group__0)
		{ after(grammarAccess.getShapeTypeRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParentTypeRule
entryRuleParentTypeRule
:
{ before(grammarAccess.getParentTypeRuleRule()); }
	 ruleParentTypeRule
{ after(grammarAccess.getParentTypeRuleRule()); } 
	 EOF 
;

// Rule ParentTypeRule
ruleParentTypeRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParentTypeRuleAccess().getGroup()); }
		(rule__ParentTypeRule__Group__0)
		{ after(grammarAccess.getParentTypeRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStepInRule
entryRuleStepInRule
:
{ before(grammarAccess.getStepInRuleRule()); }
	 ruleStepInRule
{ after(grammarAccess.getStepInRuleRule()); } 
	 EOF 
;

// Rule StepInRule
ruleStepInRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepInRuleAccess().getGroup()); }
		(rule__StepInRule__Group__0)
		{ after(grammarAccess.getStepInRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrueRule
entryRuleTrueRule
:
{ before(grammarAccess.getTrueRuleRule()); }
	 ruleTrueRule
{ after(grammarAccess.getTrueRuleRule()); } 
	 EOF 
;

// Rule TrueRule
ruleTrueRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrueRuleAccess().getGroup()); }
		(rule__TrueRule__Group__0)
		{ after(grammarAccess.getTrueRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFalseRule
entryRuleFalseRule
:
{ before(grammarAccess.getFalseRuleRule()); }
	 ruleFalseRule
{ after(grammarAccess.getFalseRuleRule()); } 
	 EOF 
;

// Rule FalseRule
ruleFalseRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFalseRuleAccess().getGroup()); }
		(rule__FalseRule__Group__0)
		{ after(grammarAccess.getFalseRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeNameRule
entryRuleShapeNameRule
:
{ before(grammarAccess.getShapeNameRuleRule()); }
	 ruleShapeNameRule
{ after(grammarAccess.getShapeNameRuleRule()); } 
	 EOF 
;

// Rule ShapeNameRule
ruleShapeNameRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeNameRuleAccess().getGroup()); }
		(rule__ShapeNameRule__Group__0)
		{ after(grammarAccess.getShapeNameRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMappingExpression
entryRuleMappingExpression
:
{ before(grammarAccess.getMappingExpressionRule()); }
	 ruleMappingExpression
{ after(grammarAccess.getMappingExpressionRule()); } 
	 EOF 
;

// Rule MappingExpression
ruleMappingExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingExpressionAccess().getImplicationMappingParserRuleCall()); }
		ruleImplicationMapping
		{ after(grammarAccess.getMappingExpressionAccess().getImplicationMappingParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplicationMapping
entryRuleImplicationMapping
:
{ before(grammarAccess.getImplicationMappingRule()); }
	 ruleImplicationMapping
{ after(grammarAccess.getImplicationMappingRule()); } 
	 EOF 
;

// Rule ImplicationMapping
ruleImplicationMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImplicationMappingAccess().getGroup()); }
		(rule__ImplicationMapping__Group__0)
		{ after(grammarAccess.getImplicationMappingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrMapping
entryRuleOrMapping
:
{ before(grammarAccess.getOrMappingRule()); }
	 ruleOrMapping
{ after(grammarAccess.getOrMappingRule()); } 
	 EOF 
;

// Rule OrMapping
ruleOrMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrMappingAccess().getGroup()); }
		(rule__OrMapping__Group__0)
		{ after(grammarAccess.getOrMappingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndMapping
entryRuleAndMapping
:
{ before(grammarAccess.getAndMappingRule()); }
	 ruleAndMapping
{ after(grammarAccess.getAndMappingRule()); } 
	 EOF 
;

// Rule AndMapping
ruleAndMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndMappingAccess().getGroup()); }
		(rule__AndMapping__Group__0)
		{ after(grammarAccess.getAndMappingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotMappingExpression
entryRuleNotMappingExpression
:
{ before(grammarAccess.getNotMappingExpressionRule()); }
	 ruleNotMappingExpression
{ after(grammarAccess.getNotMappingExpressionRule()); } 
	 EOF 
;

// Rule NotMappingExpression
ruleNotMappingExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotMappingExpressionAccess().getAlternatives()); }
		(rule__NotMappingExpression__Alternatives)
		{ after(grammarAccess.getNotMappingExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryMapping
entryRulePrimaryMapping
:
{ before(grammarAccess.getPrimaryMappingRule()); }
	 rulePrimaryMapping
{ after(grammarAccess.getPrimaryMappingRule()); } 
	 EOF 
;

// Rule PrimaryMapping
rulePrimaryMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryMappingAccess().getAlternatives()); }
		(rule__PrimaryMapping__Alternatives)
		{ after(grammarAccess.getPrimaryMappingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolicyExpression
entryRulePolicyExpression
:
{ before(grammarAccess.getPolicyExpressionRule()); }
	 rulePolicyExpression
{ after(grammarAccess.getPolicyExpressionRule()); } 
	 EOF 
;

// Rule PolicyExpression
rulePolicyExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolicyExpressionAccess().getImplicationPolicyParserRuleCall()); }
		ruleImplicationPolicy
		{ after(grammarAccess.getPolicyExpressionAccess().getImplicationPolicyParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplicationPolicy
entryRuleImplicationPolicy
:
{ before(grammarAccess.getImplicationPolicyRule()); }
	 ruleImplicationPolicy
{ after(grammarAccess.getImplicationPolicyRule()); } 
	 EOF 
;

// Rule ImplicationPolicy
ruleImplicationPolicy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImplicationPolicyAccess().getGroup()); }
		(rule__ImplicationPolicy__Group__0)
		{ after(grammarAccess.getImplicationPolicyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrPolicy
entryRuleOrPolicy
:
{ before(grammarAccess.getOrPolicyRule()); }
	 ruleOrPolicy
{ after(grammarAccess.getOrPolicyRule()); } 
	 EOF 
;

// Rule OrPolicy
ruleOrPolicy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrPolicyAccess().getGroup()); }
		(rule__OrPolicy__Group__0)
		{ after(grammarAccess.getOrPolicyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndPolicy
entryRuleAndPolicy
:
{ before(grammarAccess.getAndPolicyRule()); }
	 ruleAndPolicy
{ after(grammarAccess.getAndPolicyRule()); } 
	 EOF 
;

// Rule AndPolicy
ruleAndPolicy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndPolicyAccess().getGroup()); }
		(rule__AndPolicy__Group__0)
		{ after(grammarAccess.getAndPolicyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotExpression
entryRuleNotExpression
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotExpressionAccess().getAlternatives()); }
		(rule__NotExpression__Alternatives)
		{ after(grammarAccess.getNotExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolicyRule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyRuleAccess().getTrueRuleParserRuleCall_0()); }
		ruleTrueRule
		{ after(grammarAccess.getPolicyRuleAccess().getTrueRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getFalseRuleParserRuleCall_1()); }
		ruleFalseRule
		{ after(grammarAccess.getPolicyRuleAccess().getFalseRuleParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getCommandNameRuleParserRuleCall_2()); }
		ruleCommandNameRule
		{ after(grammarAccess.getPolicyRuleAccess().getCommandNameRuleParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getShapeTypeRuleParserRuleCall_3()); }
		ruleShapeTypeRule
		{ after(grammarAccess.getPolicyRuleAccess().getShapeTypeRuleParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getParentTypeRuleParserRuleCall_4()); }
		ruleParentTypeRule
		{ after(grammarAccess.getPolicyRuleAccess().getParentTypeRuleParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getStepInRuleParserRuleCall_5()); }
		ruleStepInRule
		{ after(grammarAccess.getPolicyRuleAccess().getStepInRuleParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getSourceTypeRuleParserRuleCall_6()); }
		ruleSourceTypeRule
		{ after(grammarAccess.getPolicyRuleAccess().getSourceTypeRuleParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getTargetTypeRuleParserRuleCall_7()); }
		ruleTargetTypeRule
		{ after(grammarAccess.getPolicyRuleAccess().getTargetTypeRuleParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getRelationIsCyclicRuleParserRuleCall_8()); }
		ruleRelationIsCyclicRule
		{ after(grammarAccess.getPolicyRuleAccess().getRelationIsCyclicRuleParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getRelationIsReflexivRuleParserRuleCall_9()); }
		ruleRelationIsReflexivRule
		{ after(grammarAccess.getPolicyRuleAccess().getRelationIsReflexivRuleParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getRelationTypesAreEqualRuleParserRuleCall_10()); }
		ruleRelationTypesAreEqualRule
		{ after(grammarAccess.getPolicyRuleAccess().getRelationTypesAreEqualRuleParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getTypeExistsRuleParserRuleCall_11()); }
		ruleTypeExistsRule
		{ after(grammarAccess.getPolicyRuleAccess().getTypeExistsRuleParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getShapeNameRuleParserRuleCall_12()); }
		ruleShapeNameRule
		{ after(grammarAccess.getPolicyRuleAccess().getShapeNameRuleParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getPolicyRuleAccess().getRelationNameRuleParserRuleCall_13()); }
		ruleRelationNameRule
		{ after(grammarAccess.getPolicyRuleAccess().getRelationNameRuleParserRuleCall_13()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingRule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingRuleAccess().getFeatureNameMappingRuleParserRuleCall_0()); }
		ruleFeatureNameMappingRule
		{ after(grammarAccess.getMappingRuleAccess().getFeatureNameMappingRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMappingRuleAccess().getTrueMappingRuleParserRuleCall_1()); }
		ruleTrueMappingRule
		{ after(grammarAccess.getMappingRuleAccess().getTrueMappingRuleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotMappingExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotMappingExpressionAccess().getPrimaryMappingParserRuleCall_0()); }
		rulePrimaryMapping
		{ after(grammarAccess.getNotMappingExpressionAccess().getPrimaryMappingParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotMappingExpressionAccess().getGroup_1()); }
		(rule__NotMappingExpression__Group_1__0)
		{ after(grammarAccess.getNotMappingExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryMapping__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryMappingAccess().getMappingRuleParserRuleCall_0()); }
		ruleMappingRule
		{ after(grammarAccess.getPrimaryMappingAccess().getMappingRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryMappingAccess().getGroup_1()); }
		(rule__PrimaryMapping__Group_1__0)
		{ after(grammarAccess.getPrimaryMappingAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getPrimaryParserRuleCall_0()); }
		rulePrimary
		{ after(grammarAccess.getNotExpressionAccess().getPrimaryParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotExpressionAccess().getGroup_1()); }
		(rule__NotExpression__Group_1__0)
		{ after(grammarAccess.getNotExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getPolicyRuleParserRuleCall_0()); }
		rulePolicyRule
		{ after(grammarAccess.getPrimaryAccess().getPolicyRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getConfigurationAssignment_0()); }
	(rule__Model__ConfigurationAssignment_0)
	{ after(grammarAccess.getModelAccess().getConfigurationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGroup_1()); }
	(rule__Model__Group_1__0)?
	{ after(grammarAccess.getModelAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_1__0__Impl
	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPoliciesAssignment_1_0()); }
	(rule__Model__PoliciesAssignment_1_0)
	{ after(grammarAccess.getModelAccess().getPoliciesAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPoliciesAssignment_1_1()); }
	(rule__Model__PoliciesAssignment_1_1)*
	{ after(grammarAccess.getModelAccess().getPoliciesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Configuration__Group__0__Impl
	rule__Configuration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigurationAccess().getConfigurationAction_0()); }
	()
	{ after(grammarAccess.getConfigurationAccess().getConfigurationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Configuration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigurationAccess().getGroup_1()); }
	(rule__Configuration__Group_1__0)?
	{ after(grammarAccess.getConfigurationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Configuration__Group_1__0__Impl
	rule__Configuration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigurationAccess().getMappingsAssignment_1_0()); }
	(rule__Configuration__MappingsAssignment_1_0)
	{ after(grammarAccess.getConfigurationAccess().getMappingsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Configuration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigurationAccess().getMappingsAssignment_1_1()); }
	(rule__Configuration__MappingsAssignment_1_1)*
	{ after(grammarAccess.getConfigurationAccess().getMappingsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Policy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__0__Impl
	rule__Policy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getNameAssignment_0()); }
	(rule__Policy__NameAssignment_0)
	{ after(grammarAccess.getPolicyAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__1__Impl
	rule__Policy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getPolicyAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Policy__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolicyAccess().getRuleAssignment_2()); }
	(rule__Policy__RuleAssignment_2)
	{ after(grammarAccess.getPolicyAccess().getRuleAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getRuleAssignment_0()); }
	(rule__Mapping__RuleAssignment_0)
	{ after(grammarAccess.getMappingAccess().getRuleAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getMappingAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMappingAccess().getPolicyAssignment_2()); }
	(rule__Mapping__PolicyAssignment_2)
	{ after(grammarAccess.getMappingAccess().getPolicyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureNameMappingRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureNameMappingRule__Group__0__Impl
	rule__FeatureNameMappingRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureNameMappingRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureNameMappingRuleAccess().getFeatureNameMappingRuleAction_0()); }
	()
	{ after(grammarAccess.getFeatureNameMappingRuleAccess().getFeatureNameMappingRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureNameMappingRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureNameMappingRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureNameMappingRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureNameMappingRuleAccess().getNameAssignment_1()); }
	(rule__FeatureNameMappingRule__NameAssignment_1)
	{ after(grammarAccess.getFeatureNameMappingRuleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrueMappingRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueMappingRule__Group__0__Impl
	rule__TrueMappingRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueMappingRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueMappingRuleAccess().getTrueMappingRuleAction_0()); }
	()
	{ after(grammarAccess.getTrueMappingRuleAccess().getTrueMappingRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueMappingRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueMappingRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueMappingRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueMappingRuleAccess().getTrueKeyword_1()); }
	'true'
	{ after(grammarAccess.getTrueMappingRuleAccess().getTrueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationIsCyclicRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationIsCyclicRule__Group__0__Impl
	rule__RelationIsCyclicRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationIsCyclicRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationIsCyclicRuleAccess().getRelationIsCyclicRuleAction_0()); }
	()
	{ after(grammarAccess.getRelationIsCyclicRuleAccess().getRelationIsCyclicRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationIsCyclicRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationIsCyclicRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationIsCyclicRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationIsCyclicRuleAccess().getRelationIsCyclicKeyword_1()); }
	'RelationIsCyclic'
	{ after(grammarAccess.getRelationIsCyclicRuleAccess().getRelationIsCyclicKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationTypesAreEqualRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationTypesAreEqualRule__Group__0__Impl
	rule__RelationTypesAreEqualRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationTypesAreEqualRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationTypesAreEqualRuleAccess().getRelationTypesAreEqualRuleAction_0()); }
	()
	{ after(grammarAccess.getRelationTypesAreEqualRuleAccess().getRelationTypesAreEqualRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationTypesAreEqualRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationTypesAreEqualRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationTypesAreEqualRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationTypesAreEqualRuleAccess().getRelationTypesAreEqualKeyword_1()); }
	'RelationTypesAreEqual'
	{ after(grammarAccess.getRelationTypesAreEqualRuleAccess().getRelationTypesAreEqualKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationIsReflexivRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationIsReflexivRule__Group__0__Impl
	rule__RelationIsReflexivRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationIsReflexivRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationIsReflexivRuleAccess().getRelationIsReflexivRuleAction_0()); }
	()
	{ after(grammarAccess.getRelationIsReflexivRuleAccess().getRelationIsReflexivRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationIsReflexivRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationIsReflexivRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationIsReflexivRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationIsReflexivRuleAccess().getRelationIsReflexivKeyword_1()); }
	'RelationIsReflexiv'
	{ after(grammarAccess.getRelationIsReflexivRuleAccess().getRelationIsReflexivKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationNameRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationNameRule__Group__0__Impl
	rule__RelationNameRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationNameRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationNameRuleAccess().getRelationNameRuleAction_0()); }
	()
	{ after(grammarAccess.getRelationNameRuleAccess().getRelationNameRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationNameRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationNameRule__Group__1__Impl
	rule__RelationNameRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationNameRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationNameRuleAccess().getRelationNameKeyword_1()); }
	'RelationName'
	{ after(grammarAccess.getRelationNameRuleAccess().getRelationNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationNameRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationNameRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationNameRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationNameRuleAccess().getNameAssignment_2()); }
	(rule__RelationNameRule__NameAssignment_2)
	{ after(grammarAccess.getRelationNameRuleAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeExistsRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeExistsRule__Group__0__Impl
	rule__TypeExistsRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExistsRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeExistsRuleAccess().getTypeExistsRuleAction_0()); }
	()
	{ after(grammarAccess.getTypeExistsRuleAccess().getTypeExistsRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExistsRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeExistsRule__Group__1__Impl
	rule__TypeExistsRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExistsRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeExistsRuleAccess().getTypeExistsKeyword_1()); }
	'TypeExists'
	{ after(grammarAccess.getTypeExistsRuleAccess().getTypeExistsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExistsRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeExistsRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExistsRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeExistsRuleAccess().getNameAssignment_2()); }
	(rule__TypeExistsRule__NameAssignment_2)
	{ after(grammarAccess.getTypeExistsRuleAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SourceTypeRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceTypeRule__Group__0__Impl
	rule__SourceTypeRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceTypeRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceTypeRuleAccess().getSourceTypeRuleAction_0()); }
	()
	{ after(grammarAccess.getSourceTypeRuleAccess().getSourceTypeRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceTypeRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceTypeRule__Group__1__Impl
	rule__SourceTypeRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceTypeRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceTypeRuleAccess().getSourceTypeKeyword_1()); }
	'SourceType'
	{ after(grammarAccess.getSourceTypeRuleAccess().getSourceTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceTypeRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceTypeRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceTypeRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceTypeRuleAccess().getNameAssignment_2()); }
	(rule__SourceTypeRule__NameAssignment_2)
	{ after(grammarAccess.getSourceTypeRuleAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TargetTypeRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetTypeRule__Group__0__Impl
	rule__TargetTypeRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTypeRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetTypeRuleAccess().getTargetTypeRuleAction_0()); }
	()
	{ after(grammarAccess.getTargetTypeRuleAccess().getTargetTypeRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTypeRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetTypeRule__Group__1__Impl
	rule__TargetTypeRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTypeRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetTypeRuleAccess().getTargetTypeKeyword_1()); }
	'TargetType'
	{ after(grammarAccess.getTargetTypeRuleAccess().getTargetTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTypeRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetTypeRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTypeRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetTypeRuleAccess().getNameAssignment_2()); }
	(rule__TargetTypeRule__NameAssignment_2)
	{ after(grammarAccess.getTargetTypeRuleAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandNameRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandNameRule__Group__0__Impl
	rule__CommandNameRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandNameRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandNameRuleAccess().getCommandNameRuleAction_0()); }
	()
	{ after(grammarAccess.getCommandNameRuleAccess().getCommandNameRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandNameRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandNameRule__Group__1__Impl
	rule__CommandNameRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandNameRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandNameRuleAccess().getCommandNameKeyword_1()); }
	'CommandName'
	{ after(grammarAccess.getCommandNameRuleAccess().getCommandNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandNameRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandNameRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandNameRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandNameRuleAccess().getNameAssignment_2()); }
	(rule__CommandNameRule__NameAssignment_2)
	{ after(grammarAccess.getCommandNameRuleAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeTypeRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeTypeRule__Group__0__Impl
	rule__ShapeTypeRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeTypeRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeTypeRuleAccess().getShapeTypeRuleAction_0()); }
	()
	{ after(grammarAccess.getShapeTypeRuleAccess().getShapeTypeRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeTypeRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeTypeRule__Group__1__Impl
	rule__ShapeTypeRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeTypeRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeTypeRuleAccess().getShapeTypeKeyword_1()); }
	'ShapeType'
	{ after(grammarAccess.getShapeTypeRuleAccess().getShapeTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeTypeRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeTypeRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeTypeRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeTypeRuleAccess().getNameAssignment_2()); }
	(rule__ShapeTypeRule__NameAssignment_2)
	{ after(grammarAccess.getShapeTypeRuleAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParentTypeRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParentTypeRule__Group__0__Impl
	rule__ParentTypeRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParentTypeRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParentTypeRuleAccess().getParentTypeRuleAction_0()); }
	()
	{ after(grammarAccess.getParentTypeRuleAccess().getParentTypeRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParentTypeRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParentTypeRule__Group__1__Impl
	rule__ParentTypeRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParentTypeRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParentTypeRuleAccess().getParentTypeKeyword_1()); }
	'ParentType'
	{ after(grammarAccess.getParentTypeRuleAccess().getParentTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParentTypeRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParentTypeRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParentTypeRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParentTypeRuleAccess().getNameAssignment_2()); }
	(rule__ParentTypeRule__NameAssignment_2)
	{ after(grammarAccess.getParentTypeRuleAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StepInRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepInRule__Group__0__Impl
	rule__StepInRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepInRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepInRuleAccess().getStepInRuleAction_0()); }
	()
	{ after(grammarAccess.getStepInRuleAccess().getStepInRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepInRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepInRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepInRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepInRuleAccess().getStepInKeyword_1()); }
	'StepIn'
	{ after(grammarAccess.getStepInRuleAccess().getStepInKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrueRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueRule__Group__0__Impl
	rule__TrueRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueRuleAccess().getTrueRuleAction_0()); }
	()
	{ after(grammarAccess.getTrueRuleAccess().getTrueRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueRuleAccess().getTrueKeyword_1()); }
	'true'
	{ after(grammarAccess.getTrueRuleAccess().getTrueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FalseRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FalseRule__Group__0__Impl
	rule__FalseRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseRuleAccess().getFalseRuleAction_0()); }
	()
	{ after(grammarAccess.getFalseRuleAccess().getFalseRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FalseRule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseRuleAccess().getFalseKeyword_1()); }
	'false'
	{ after(grammarAccess.getFalseRuleAccess().getFalseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeNameRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeNameRule__Group__0__Impl
	rule__ShapeNameRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeNameRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeNameRuleAccess().getShapeNameRuleAction_0()); }
	()
	{ after(grammarAccess.getShapeNameRuleAccess().getShapeNameRuleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeNameRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeNameRule__Group__1__Impl
	rule__ShapeNameRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeNameRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeNameRuleAccess().getShapeNameKeyword_1()); }
	'ShapeName'
	{ after(grammarAccess.getShapeNameRuleAccess().getShapeNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeNameRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeNameRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeNameRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeNameRuleAccess().getNameAssignment_2()); }
	(rule__ShapeNameRule__NameAssignment_2)
	{ after(grammarAccess.getShapeNameRuleAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicationMapping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationMapping__Group__0__Impl
	rule__ImplicationMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationMapping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationMappingAccess().getOrMappingParserRuleCall_0()); }
	ruleOrMapping
	{ after(grammarAccess.getImplicationMappingAccess().getOrMappingParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationMapping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationMapping__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationMapping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationMappingAccess().getGroup_1()); }
	(rule__ImplicationMapping__Group_1__0)?
	{ after(grammarAccess.getImplicationMappingAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicationMapping__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationMapping__Group_1__0__Impl
	rule__ImplicationMapping__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationMapping__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationMappingAccess().getImplicationMappingRuleAntecedentAction_1_0()); }
	()
	{ after(grammarAccess.getImplicationMappingAccess().getImplicationMappingRuleAntecedentAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationMapping__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationMapping__Group_1__1__Impl
	rule__ImplicationMapping__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationMapping__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationMappingAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
	'=>'
	{ after(grammarAccess.getImplicationMappingAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationMapping__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationMapping__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationMapping__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationMappingAccess().getConsequentAssignment_1_2()); }
	(rule__ImplicationMapping__ConsequentAssignment_1_2)
	{ after(grammarAccess.getImplicationMappingAccess().getConsequentAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrMapping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrMapping__Group__0__Impl
	rule__OrMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrMapping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrMappingAccess().getAndMappingParserRuleCall_0()); }
	ruleAndMapping
	{ after(grammarAccess.getOrMappingAccess().getAndMappingParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrMapping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrMapping__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrMapping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrMappingAccess().getGroup_1()); }
	(rule__OrMapping__Group_1__0)*
	{ after(grammarAccess.getOrMappingAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrMapping__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrMapping__Group_1__0__Impl
	rule__OrMapping__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrMapping__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrMappingAccess().getOrMappingRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getOrMappingAccess().getOrMappingRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrMapping__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrMapping__Group_1__1__Impl
	rule__OrMapping__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrMapping__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrMappingAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getOrMappingAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrMapping__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrMapping__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrMapping__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrMappingAccess().getRulesAssignment_1_2()); }
	(rule__OrMapping__RulesAssignment_1_2)
	{ after(grammarAccess.getOrMappingAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndMapping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndMapping__Group__0__Impl
	rule__AndMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndMapping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndMappingAccess().getNotMappingExpressionParserRuleCall_0()); }
	ruleNotMappingExpression
	{ after(grammarAccess.getAndMappingAccess().getNotMappingExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndMapping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndMapping__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndMapping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndMappingAccess().getGroup_1()); }
	(rule__AndMapping__Group_1__0)*
	{ after(grammarAccess.getAndMappingAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndMapping__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndMapping__Group_1__0__Impl
	rule__AndMapping__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndMapping__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndMappingAccess().getAndMappingRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getAndMappingAccess().getAndMappingRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndMapping__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndMapping__Group_1__1__Impl
	rule__AndMapping__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndMapping__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndMappingAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getAndMappingAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndMapping__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndMapping__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndMapping__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndMappingAccess().getRulesAssignment_1_2()); }
	(rule__AndMapping__RulesAssignment_1_2)
	{ after(grammarAccess.getAndMappingAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotMappingExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotMappingExpression__Group_1__0__Impl
	rule__NotMappingExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotMappingExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotMappingExpressionAccess().getExclamationMarkKeyword_1_0()); }
	'!'
	{ after(grammarAccess.getNotMappingExpressionAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotMappingExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotMappingExpression__Group_1__1__Impl
	rule__NotMappingExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotMappingExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotMappingExpressionAccess().getNotMappingRuleAction_1_1()); }
	()
	{ after(grammarAccess.getNotMappingExpressionAccess().getNotMappingRuleAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotMappingExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotMappingExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotMappingExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotMappingExpressionAccess().getRuleAssignment_1_2()); }
	(rule__NotMappingExpression__RuleAssignment_1_2)
	{ after(grammarAccess.getNotMappingExpressionAccess().getRuleAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryMapping__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryMapping__Group_1__0__Impl
	rule__PrimaryMapping__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryMapping__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryMappingAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryMappingAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryMapping__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryMapping__Group_1__1__Impl
	rule__PrimaryMapping__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryMapping__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryMappingAccess().getMappingExpressionParserRuleCall_1_1()); }
	ruleMappingExpression
	{ after(grammarAccess.getPrimaryMappingAccess().getMappingExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryMapping__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryMapping__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryMapping__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryMappingAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryMappingAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicationPolicy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationPolicy__Group__0__Impl
	rule__ImplicationPolicy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationPolicy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationPolicyAccess().getOrPolicyParserRuleCall_0()); }
	ruleOrPolicy
	{ after(grammarAccess.getImplicationPolicyAccess().getOrPolicyParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationPolicy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationPolicy__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationPolicy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationPolicyAccess().getGroup_1()); }
	(rule__ImplicationPolicy__Group_1__0)?
	{ after(grammarAccess.getImplicationPolicyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImplicationPolicy__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationPolicy__Group_1__0__Impl
	rule__ImplicationPolicy__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationPolicy__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationPolicyAccess().getImplicationRuleAntecedentAction_1_0()); }
	()
	{ after(grammarAccess.getImplicationPolicyAccess().getImplicationRuleAntecedentAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationPolicy__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationPolicy__Group_1__1__Impl
	rule__ImplicationPolicy__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationPolicy__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationPolicyAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
	'=>'
	{ after(grammarAccess.getImplicationPolicyAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationPolicy__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImplicationPolicy__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationPolicy__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplicationPolicyAccess().getConsequentAssignment_1_2()); }
	(rule__ImplicationPolicy__ConsequentAssignment_1_2)
	{ after(grammarAccess.getImplicationPolicyAccess().getConsequentAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrPolicy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrPolicy__Group__0__Impl
	rule__OrPolicy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrPolicy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrPolicyAccess().getAndPolicyParserRuleCall_0()); }
	ruleAndPolicy
	{ after(grammarAccess.getOrPolicyAccess().getAndPolicyParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrPolicy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrPolicy__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrPolicy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrPolicyAccess().getGroup_1()); }
	(rule__OrPolicy__Group_1__0)*
	{ after(grammarAccess.getOrPolicyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrPolicy__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrPolicy__Group_1__0__Impl
	rule__OrPolicy__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrPolicy__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrPolicyAccess().getOrRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getOrPolicyAccess().getOrRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrPolicy__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrPolicy__Group_1__1__Impl
	rule__OrPolicy__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrPolicy__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrPolicyAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getOrPolicyAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrPolicy__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrPolicy__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrPolicy__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrPolicyAccess().getRulesAssignment_1_2()); }
	(rule__OrPolicy__RulesAssignment_1_2)
	{ after(grammarAccess.getOrPolicyAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndPolicy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndPolicy__Group__0__Impl
	rule__AndPolicy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndPolicy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndPolicyAccess().getNotExpressionParserRuleCall_0()); }
	ruleNotExpression
	{ after(grammarAccess.getAndPolicyAccess().getNotExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndPolicy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndPolicy__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndPolicy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndPolicyAccess().getGroup_1()); }
	(rule__AndPolicy__Group_1__0)*
	{ after(grammarAccess.getAndPolicyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndPolicy__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndPolicy__Group_1__0__Impl
	rule__AndPolicy__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndPolicy__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndPolicyAccess().getAndRuleRulesAction_1_0()); }
	()
	{ after(grammarAccess.getAndPolicyAccess().getAndRuleRulesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndPolicy__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndPolicy__Group_1__1__Impl
	rule__AndPolicy__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndPolicy__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndPolicyAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getAndPolicyAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndPolicy__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndPolicy__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndPolicy__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndPolicyAccess().getRulesAssignment_1_2()); }
	(rule__AndPolicy__RulesAssignment_1_2)
	{ after(grammarAccess.getAndPolicyAccess().getRulesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group_1__0__Impl
	rule__NotExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_1_0()); }
	'!'
	{ after(grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group_1__1__Impl
	rule__NotExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getNotRuleAction_1_1()); }
	()
	{ after(grammarAccess.getNotExpressionAccess().getNotRuleAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getRuleAssignment_1_2()); }
	(rule__NotExpression__RuleAssignment_1_2)
	{ after(grammarAccess.getNotExpressionAccess().getRuleAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getPolicyExpressionParserRuleCall_1_1()); }
	rulePolicyExpression
	{ after(grammarAccess.getPrimaryAccess().getPolicyExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ConfigurationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConfigurationConfigurationParserRuleCall_0_0()); }
		ruleConfiguration
		{ after(grammarAccess.getModelAccess().getConfigurationConfigurationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PoliciesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_0_0()); }
		rulePolicy
		{ after(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PoliciesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_1_0()); }
		rulePolicy
		{ after(grammarAccess.getModelAccess().getPoliciesPolicyParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__MappingsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfigurationAccess().getMappingsMappingParserRuleCall_1_0_0()); }
		ruleMapping
		{ after(grammarAccess.getConfigurationAccess().getMappingsMappingParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__MappingsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfigurationAccess().getMappingsMappingParserRuleCall_1_1_0()); }
		ruleMapping
		{ after(grammarAccess.getConfigurationAccess().getMappingsMappingParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getPolicyAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Policy__RuleAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolicyAccess().getRulePolicyExpressionParserRuleCall_2_0()); }
		rulePolicyExpression
		{ after(grammarAccess.getPolicyAccess().getRulePolicyExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__RuleAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingAccess().getRuleMappingExpressionParserRuleCall_0_0()); }
		ruleMappingExpression
		{ after(grammarAccess.getMappingAccess().getRuleMappingExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__PolicyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingAccess().getPolicyPolicyCrossReference_2_0()); }
		(
			{ before(grammarAccess.getMappingAccess().getPolicyPolicyIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMappingAccess().getPolicyPolicyIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getMappingAccess().getPolicyPolicyCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureNameMappingRule__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureNameMappingRuleAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getFeatureNameMappingRuleAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationNameRule__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationNameRuleAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getRelationNameRuleAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeExistsRule__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeExistsRuleAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getTypeExistsRuleAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceTypeRule__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceTypeRuleAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getSourceTypeRuleAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTypeRule__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetTypeRuleAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getTargetTypeRuleAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandNameRule__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandNameRuleAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getCommandNameRuleAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeTypeRule__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeTypeRuleAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getShapeTypeRuleAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParentTypeRule__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParentTypeRuleAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getParentTypeRuleAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeNameRule__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeNameRuleAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getShapeNameRuleAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationMapping__ConsequentAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImplicationMappingAccess().getConsequentOrMappingParserRuleCall_1_2_0()); }
		ruleOrMapping
		{ after(grammarAccess.getImplicationMappingAccess().getConsequentOrMappingParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrMapping__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrMappingAccess().getRulesAndMappingParserRuleCall_1_2_0()); }
		ruleAndMapping
		{ after(grammarAccess.getOrMappingAccess().getRulesAndMappingParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndMapping__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndMappingAccess().getRulesNotMappingExpressionParserRuleCall_1_2_0()); }
		ruleNotMappingExpression
		{ after(grammarAccess.getAndMappingAccess().getRulesNotMappingExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotMappingExpression__RuleAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotMappingExpressionAccess().getRulePrimaryMappingParserRuleCall_1_2_0()); }
		rulePrimaryMapping
		{ after(grammarAccess.getNotMappingExpressionAccess().getRulePrimaryMappingParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicationPolicy__ConsequentAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImplicationPolicyAccess().getConsequentOrPolicyParserRuleCall_1_2_0()); }
		ruleOrPolicy
		{ after(grammarAccess.getImplicationPolicyAccess().getConsequentOrPolicyParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrPolicy__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrPolicyAccess().getRulesAndPolicyParserRuleCall_1_2_0()); }
		ruleAndPolicy
		{ after(grammarAccess.getOrPolicyAccess().getRulesAndPolicyParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndPolicy__RulesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndPolicyAccess().getRulesNotExpressionParserRuleCall_1_2_0()); }
		ruleNotExpression
		{ after(grammarAccess.getAndPolicyAccess().getRulesNotExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__RuleAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotExpressionAccess().getRulePrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getNotExpressionAccess().getRulePrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
