/**
 */
package model.provider;

import java.util.ArrayList;
import java.util.Collection;

import model.util.ModelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link model.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Policy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolicyItemProvider policyItemProvider;

	/**
	 * This creates an adapter for a {@link model.Policy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolicyAdapter() {
		if (policyItemProvider == null) {
			policyItemProvider = new PolicyItemProvider(this);
		}

		return policyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link model.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Mapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingItemProvider mappingItemProvider;

	/**
	 * This creates an adapter for a {@link model.Mapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingAdapter() {
		if (mappingItemProvider == null) {
			mappingItemProvider = new MappingItemProvider(this);
		}

		return mappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.FeatureNameMappingRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureNameMappingRuleItemProvider featureNameMappingRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.FeatureNameMappingRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureNameMappingRuleAdapter() {
		if (featureNameMappingRuleItemProvider == null) {
			featureNameMappingRuleItemProvider = new FeatureNameMappingRuleItemProvider(this);
		}

		return featureNameMappingRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AndMappingRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndMappingRuleItemProvider andMappingRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.AndMappingRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndMappingRuleAdapter() {
		if (andMappingRuleItemProvider == null) {
			andMappingRuleItemProvider = new AndMappingRuleItemProvider(this);
		}

		return andMappingRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.AndRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndRuleItemProvider andRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.AndRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndRuleAdapter() {
		if (andRuleItemProvider == null) {
			andRuleItemProvider = new AndRuleItemProvider(this);
		}

		return andRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.RelationTypeRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationTypeRuleItemProvider relationTypeRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.RelationTypeRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationTypeRuleAdapter() {
		if (relationTypeRuleItemProvider == null) {
			relationTypeRuleItemProvider = new RelationTypeRuleItemProvider(this);
		}

		return relationTypeRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.NotMappingRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotMappingRuleItemProvider notMappingRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.NotMappingRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotMappingRuleAdapter() {
		if (notMappingRuleItemProvider == null) {
			notMappingRuleItemProvider = new NotMappingRuleItemProvider(this);
		}

		return notMappingRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.OrMappingRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrMappingRuleItemProvider orMappingRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.OrMappingRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrMappingRuleAdapter() {
		if (orMappingRuleItemProvider == null) {
			orMappingRuleItemProvider = new OrMappingRuleItemProvider(this);
		}

		return orMappingRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ImplicationMappingRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicationMappingRuleItemProvider implicationMappingRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.ImplicationMappingRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplicationMappingRuleAdapter() {
		if (implicationMappingRuleItemProvider == null) {
			implicationMappingRuleItemProvider = new ImplicationMappingRuleItemProvider(this);
		}

		return implicationMappingRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.OrRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrRuleItemProvider orRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.OrRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrRuleAdapter() {
		if (orRuleItemProvider == null) {
			orRuleItemProvider = new OrRuleItemProvider(this);
		}

		return orRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.NotRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotRuleItemProvider notRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.NotRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotRuleAdapter() {
		if (notRuleItemProvider == null) {
			notRuleItemProvider = new NotRuleItemProvider(this);
		}

		return notRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ImplicationRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicationRuleItemProvider implicationRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.ImplicationRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplicationRuleAdapter() {
		if (implicationRuleItemProvider == null) {
			implicationRuleItemProvider = new ImplicationRuleItemProvider(this);
		}

		return implicationRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.SourceTypeRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceTypeRuleItemProvider sourceTypeRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.SourceTypeRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceTypeRuleAdapter() {
		if (sourceTypeRuleItemProvider == null) {
			sourceTypeRuleItemProvider = new SourceTypeRuleItemProvider(this);
		}

		return sourceTypeRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.TargetTypeRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetTypeRuleItemProvider targetTypeRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.TargetTypeRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetTypeRuleAdapter() {
		if (targetTypeRuleItemProvider == null) {
			targetTypeRuleItemProvider = new TargetTypeRuleItemProvider(this);
		}

		return targetTypeRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.CommandNameRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandNameRuleItemProvider commandNameRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.CommandNameRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandNameRuleAdapter() {
		if (commandNameRuleItemProvider == null) {
			commandNameRuleItemProvider = new CommandNameRuleItemProvider(this);
		}

		return commandNameRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ShapeTypeRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShapeTypeRuleItemProvider shapeTypeRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.ShapeTypeRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShapeTypeRuleAdapter() {
		if (shapeTypeRuleItemProvider == null) {
			shapeTypeRuleItemProvider = new ShapeTypeRuleItemProvider(this);
		}

		return shapeTypeRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ParentTypeRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParentTypeRuleItemProvider parentTypeRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.ParentTypeRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParentTypeRuleAdapter() {
		if (parentTypeRuleItemProvider == null) {
			parentTypeRuleItemProvider = new ParentTypeRuleItemProvider(this);
		}

		return parentTypeRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.StepInRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepInRuleItemProvider stepInRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.StepInRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepInRuleAdapter() {
		if (stepInRuleItemProvider == null) {
			stepInRuleItemProvider = new StepInRuleItemProvider(this);
		}

		return stepInRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.TrueRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrueRuleItemProvider trueRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.TrueRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrueRuleAdapter() {
		if (trueRuleItemProvider == null) {
			trueRuleItemProvider = new TrueRuleItemProvider(this);
		}

		return trueRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.FalseRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FalseRuleItemProvider falseRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.FalseRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFalseRuleAdapter() {
		if (falseRuleItemProvider == null) {
			falseRuleItemProvider = new FalseRuleItemProvider(this);
		}

		return falseRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.ShapeNameRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShapeNameRuleItemProvider shapeNameRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.ShapeNameRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShapeNameRuleAdapter() {
		if (shapeNameRuleItemProvider == null) {
			shapeNameRuleItemProvider = new ShapeNameRuleItemProvider(this);
		}

		return shapeNameRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.TrueMappingRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrueMappingRuleItemProvider trueMappingRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.TrueMappingRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrueMappingRuleAdapter() {
		if (trueMappingRuleItemProvider == null) {
			trueMappingRuleItemProvider = new TrueMappingRuleItemProvider(this);
		}

		return trueMappingRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.RelationIsCyclicRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationIsCyclicRuleItemProvider relationIsCyclicRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.RelationIsCyclicRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationIsCyclicRuleAdapter() {
		if (relationIsCyclicRuleItemProvider == null) {
			relationIsCyclicRuleItemProvider = new RelationIsCyclicRuleItemProvider(this);
		}

		return relationIsCyclicRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.RelationIsReflexivRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationIsReflexivRuleItemProvider relationIsReflexivRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.RelationIsReflexivRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationIsReflexivRuleAdapter() {
		if (relationIsReflexivRuleItemProvider == null) {
			relationIsReflexivRuleItemProvider = new RelationIsReflexivRuleItemProvider(this);
		}

		return relationIsReflexivRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.RelationTypesAreEqualRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationTypesAreEqualRuleItemProvider relationTypesAreEqualRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.RelationTypesAreEqualRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationTypesAreEqualRuleAdapter() {
		if (relationTypesAreEqualRuleItemProvider == null) {
			relationTypesAreEqualRuleItemProvider = new RelationTypesAreEqualRuleItemProvider(this);
		}

		return relationTypesAreEqualRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.TypeExistsRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeExistsRuleItemProvider typeExistsRuleItemProvider;

	/**
	 * This creates an adapter for a {@link model.TypeExistsRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeExistsRuleAdapter() {
		if (typeExistsRuleItemProvider == null) {
			typeExistsRuleItemProvider = new TypeExistsRuleItemProvider(this);
		}

		return typeExistsRuleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (policyItemProvider != null) policyItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (mappingItemProvider != null) mappingItemProvider.dispose();
		if (featureNameMappingRuleItemProvider != null) featureNameMappingRuleItemProvider.dispose();
		if (andMappingRuleItemProvider != null) andMappingRuleItemProvider.dispose();
		if (andRuleItemProvider != null) andRuleItemProvider.dispose();
		if (relationTypeRuleItemProvider != null) relationTypeRuleItemProvider.dispose();
		if (notMappingRuleItemProvider != null) notMappingRuleItemProvider.dispose();
		if (orMappingRuleItemProvider != null) orMappingRuleItemProvider.dispose();
		if (implicationMappingRuleItemProvider != null) implicationMappingRuleItemProvider.dispose();
		if (orRuleItemProvider != null) orRuleItemProvider.dispose();
		if (notRuleItemProvider != null) notRuleItemProvider.dispose();
		if (implicationRuleItemProvider != null) implicationRuleItemProvider.dispose();
		if (sourceTypeRuleItemProvider != null) sourceTypeRuleItemProvider.dispose();
		if (targetTypeRuleItemProvider != null) targetTypeRuleItemProvider.dispose();
		if (commandNameRuleItemProvider != null) commandNameRuleItemProvider.dispose();
		if (shapeTypeRuleItemProvider != null) shapeTypeRuleItemProvider.dispose();
		if (parentTypeRuleItemProvider != null) parentTypeRuleItemProvider.dispose();
		if (stepInRuleItemProvider != null) stepInRuleItemProvider.dispose();
		if (trueRuleItemProvider != null) trueRuleItemProvider.dispose();
		if (falseRuleItemProvider != null) falseRuleItemProvider.dispose();
		if (shapeNameRuleItemProvider != null) shapeNameRuleItemProvider.dispose();
		if (trueMappingRuleItemProvider != null) trueMappingRuleItemProvider.dispose();
		if (relationIsCyclicRuleItemProvider != null) relationIsCyclicRuleItemProvider.dispose();
		if (relationIsReflexivRuleItemProvider != null) relationIsReflexivRuleItemProvider.dispose();
		if (relationTypesAreEqualRuleItemProvider != null) relationTypesAreEqualRuleItemProvider.dispose();
		if (typeExistsRuleItemProvider != null) typeExistsRuleItemProvider.dispose();
	}

}
